"""
API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram –±–æ—Ç–æ–º.
"""

import json
import logging
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods

from botapp.models import User
from webapp.utils.db_utils import get_db_manager
from botapp.models_notification import (
    NotificationPreference, get_notification_preferences,
    create_notification_preferences, update_notification_preferences,
    get_recent_notifications
)
from botapp.models_child import Child
from botapp.utils.telegram_notifier import (
    send_telegram_notification, format_sleep_notification,
    format_feeding_notification, format_contraction_notification,
    format_kick_notification
)

logger = logging.getLogger(__name__)


def notification_preference_to_dict(preference):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç NotificationPreference –≤ —Å–ª–æ–≤–∞—Ä—å."""
    if not preference:
        return None
        
    return {
        'id': preference.id,
        'user_id': preference.user_id,
        'enabled': preference.enabled,
        'telegram_enabled': preference.telegram_enabled,
        'web_enabled': preference.web_enabled,
        'sleep_timer_notifications': preference.sleep_timer_notifications,
        'feeding_timer_notifications': preference.feeding_timer_notifications,
        'contraction_counter_notifications': preference.contraction_counter_notifications,
        'kick_counter_notifications': preference.kick_counter_notifications,
        'vaccine_reminder_notifications': preference.vaccine_reminder_notifications,
        'sleep_notification_frequency': preference.sleep_notification_frequency,
        'feeding_notification_frequency': preference.feeding_notification_frequency,
        'contraction_notification_frequency': preference.contraction_notification_frequency,
        'created_at': preference.created_at.isoformat() if preference.created_at else None,
        'updated_at': preference.updated_at.isoformat() if preference.updated_at else None
    }


def notification_log_to_dict(log):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç NotificationLog –≤ —Å–ª–æ–≤–∞—Ä—å."""
    return {
        'id': log.id,
        'user_id': log.user_id,
        'notification_type': log.notification_type,
        'entity_id': log.entity_id,
        'channel': log.channel,
        'content': log.content,
        'sent_at': log.sent_at.isoformat() if log.sent_at else None,
        'status': log.status
    }


@csrf_exempt
@require_http_methods(["GET", "POST"])
def notification_preferences(request, user_id):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    GET: –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    POST: –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        user_id = int(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_manager = get_db_manager()

        session = db_manager.get_session()
        try:
            user = session.query(User).filter_by(id=user_id).first()
            if not user:
                return JsonResponse({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=404)
        finally:
            db_manager.close_session(session)
        
        if request.method == 'GET':
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            preferences = get_notification_preferences(user_id)
            
            # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∏—Ö —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if not preferences:
                preferences = create_notification_preferences(user_id)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
            preferences_data = notification_preference_to_dict(preferences)
            
            return JsonResponse(preferences_data)
        
        elif request.method == 'POST':
            # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
            data = json.loads(request.body)
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            preferences = create_notification_preferences(user_id, **data)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
            preferences_data = notification_preference_to_dict(preferences)
            
            return JsonResponse(preferences_data)
    
    except Exception as e:
        logger.error(f"Error in notification_preferences: {e}")
        return JsonResponse({'error': str(e)}, status=500)


@csrf_exempt
@require_http_methods(["GET"])
def notification_history(request, user_id):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    GET: –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        user_id = int(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_manager = get_db_manager()

        session = db_manager.get_session()
        try:
            user = session.query(User).filter_by(id=user_id).first()
            if not user:
                return JsonResponse({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=404)
        finally:
            db_manager.close_session(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        notification_type = request.GET.get('type')
        limit = int(request.GET.get('limit', 10))
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        logs = get_recent_notifications(user_id, notification_type, limit)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
        logs_data = [notification_log_to_dict(log) for log in logs]
        
        return JsonResponse({'notification_logs': logs_data})
    
    except Exception as e:
        logger.error(f"Error in notification_history: {e}")
        return JsonResponse({'error': str(e)}, status=500)


@csrf_exempt
@require_http_methods(["POST"])
def test_notification(request, user_id):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    POST: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    """
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        user_id = int(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_manager = get_db_manager()

        session = db_manager.get_session()
        try:
            user = session.query(User).filter_by(id=user_id).first()
            if not user:
                return JsonResponse({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=404)
        finally:
            db_manager.close_session(session)
        
        # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        data = json.loads(request.body)
        notification_type = data.get('type', 'test')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        text = "üîî <b>–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram –±–æ—Ç–æ–º."
        success = send_telegram_notification(user_id, notification_type, 0, text)
        
        if success:
            return JsonResponse({'success': True, 'message': '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'})
        else:
            return JsonResponse({'success': False, 'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'}, status=500)
    
    except Exception as e:
        logger.error(f"Error in test_notification: {e}")
        return JsonResponse({'error': str(e)}, status=500)


@csrf_exempt
@require_http_methods(["POST"])
def send_notification(request, user_id):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    POST: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    """
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        user_id = int(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_manager = get_db_manager()

        session = db_manager.get_session()
        try:
            user = session.query(User).filter_by(id=user_id).first()
            if not user:
                return JsonResponse({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=404)
        finally:
            db_manager.close_session(session)
        
        # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        data = json.loads(request.body)
        notification_type = data.get('notification_type')
        entity_id = data.get('entity_id')
        notification_data = data.get('data', {})
        
        if not notification_type or not entity_id:
            return JsonResponse({'error': '–ù–µ —É–∫–∞–∑–∞–Ω —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–ª–∏ ID —Å—É—â–Ω–æ—Å—Ç–∏'}, status=400)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        text = None
        
        if notification_type == 'sleep':
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ä–µ–±–µ–Ω–∫–∞
            child_name = notification_data.get('child_name', '–†–µ–±–µ–Ω–æ–∫')
            if notification_data.get('child_id'):
                db_manager = get_db_manager()

                session = db_manager.get_session()
                try:
                    child = session.query(Child).filter_by(id=notification_data.get('child_id')).first()
                    if child and child.name:
                        child_name = child.name
                finally:
                    db_manager.close_session(session)
            
            text = format_sleep_notification(
                child_name=child_name,
                duration_minutes=notification_data.get('duration_minutes', 0),
                sleep_type=notification_data.get('sleep_type', 'day')
            )
        
        elif notification_type == 'feeding':
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ä–µ–±–µ–Ω–∫–∞
            child_name = notification_data.get('child_name', '–†–µ–±–µ–Ω–æ–∫')
            if notification_data.get('child_id'):
                db_manager = get_db_manager()

                session = db_manager.get_session()
                try:
                    child = session.query(Child).filter_by(id=notification_data.get('child_id')).first()
                    if child and child.name:
                        child_name = child.name
                finally:
                    db_manager.close_session(session)
            
            text = format_feeding_notification(
                child_name=child_name,
                feeding_type=notification_data.get('feeding_type', 'bottle'),
                amount=notification_data.get('amount'),
                duration=notification_data.get('duration'),
                breast=notification_data.get('breast')
            )
        
        elif notification_type == 'contraction':
            text = format_contraction_notification(
                count=notification_data.get('count', 0),
                avg_interval=notification_data.get('avg_interval', 0),
                duration=notification_data.get('duration', 0)
            )
        
        elif notification_type == 'kick':
            text = format_kick_notification(
                count=notification_data.get('count', 0),
                duration=notification_data.get('duration', 0)
            )
        
        else:
            # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π —Ñ–æ—Ä–º–∞—Ç
            text = f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n{notification_data.get('message', '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        success = send_telegram_notification(user_id, notification_type, entity_id, text)
        
        if success:
            return JsonResponse({'success': True, 'message': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'})
        else:
            return JsonResponse({'success': False, 'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'}, status=500)
    
    except Exception as e:
        logger.error(f"Error in send_notification: {e}")
        return JsonResponse({'error': str(e)}, status=500)