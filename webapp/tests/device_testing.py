"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö.
"""

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
import json
import os
from datetime import datetime


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–∫—Ä–∞–Ω–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
DEVICE_SIZES = {
    "desktop": {
        "width": 1366,
        "height": 768,
        "device_type": "desktop",
        "description": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–µ—Å–∫—Ç–æ–ø (1366x768)"
    },
    "laptop": {
        "width": 1280,
        "height": 800,
        "device_type": "desktop",
        "description": "–ù–æ—É—Ç–±—É–∫ (1280x800)"
    },
    "tablet_landscape": {
        "width": 1024,
        "height": 768,
        "device_type": "tablet",
        "description": "–ü–ª–∞–Ω—à–µ—Ç –≤ –∞–ª—å–±–æ–º–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ (1024x768)"
    },
    "tablet_portrait": {
        "width": 768,
        "height": 1024,
        "device_type": "tablet",
        "description": "–ü–ª–∞–Ω—à–µ—Ç –≤ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ (768x1024)"
    },
    "mobile_large": {
        "width": 414,
        "height": 896,
        "device_type": "mobile",
        "description": "–ö—Ä—É–ø–Ω—ã–π –º–æ–±–∏–ª—å–Ω—ã–π (iPhone 11 Pro Max)"
    },
    "mobile_medium": {
        "width": 375,
        "height": 667,
        "device_type": "mobile",
        "description": "–°—Ä–µ–¥–Ω–∏–π –º–æ–±–∏–ª—å–Ω—ã–π (iPhone 8)"
    },
    "mobile_small": {
        "width": 320,
        "height": 568,
        "device_type": "mobile",
        "description": "–ú–∞–ª–µ–Ω—å–∫–∏–π –º–æ–±–∏–ª—å–Ω—ã–π (iPhone SE)"
    }
}


def take_screenshot(browser, device_name, url, output_dir):
    """
    –î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
    
    Args:
        browser: –≠–∫–∑–µ–º–ø–ª—è—Ä Selenium WebDriver
        device_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        url (str): URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        output_dir (str): –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        
    Returns:
        str: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Å–∫—Ä–∏–Ω—à–æ—Ç—É
    """
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞
    device = DEVICE_SIZES[device_name]
    browser.set_window_size(device["width"], device["height"])
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    browser.get(url)
    
    # –î–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
    browser.implicitly_wait(5)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"{device_name}_{timestamp}.png"
    filepath = os.path.join(output_dir, filename)
    
    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    browser.save_screenshot(filepath)
    
    return filepath


def test_responsive_design(url, output_dir="screenshots", devices=None, headless=True):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–∑—ã–≤—á–∏–≤—ã–π –¥–∏–∑–∞–π–Ω –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö.
    
    Args:
        url (str): URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        output_dir (str): –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        devices (list): –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ)
        headless (bool): –ó–∞–ø—É—Å–∫–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –≤ –±–µ–∑–≥–æ–ª–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    # –ï—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
    if devices is None:
        devices = list(DEVICE_SIZES.keys())
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome WebDriver
    chrome_options = Options()
    if headless:
        chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä WebDriver
    try:
        browser = webdriver.Chrome(options=chrome_options)
    except Exception:
        # –ï—Å–ª–∏ Chrome –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º Firefox
        firefox_options = webdriver.FirefoxOptions()
        if headless:
            firefox_options.add_argument("--headless")
        browser = webdriver.Firefox(options=firefox_options)
    
    results = {
        "url": url,
        "timestamp": datetime.now().isoformat(),
        "devices": {}
    }
    
    try:
        for device_name in devices:
            if device_name not in DEVICE_SIZES:
                print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_name}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
            
            print(f"üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {device_name} ({DEVICE_SIZES[device_name]['description']})")
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            screenshot_path = take_screenshot(browser, device_name, url, output_dir)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results["devices"][device_name] = {
                "size": f"{DEVICE_SIZES[device_name]['width']}x{DEVICE_SIZES[device_name]['height']}",
                "device_type": DEVICE_SIZES[device_name]['device_type'],
                "description": DEVICE_SIZES[device_name]['description'],
                "screenshot": screenshot_path
            }
            
            print(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_path}")
    
    finally:
        browser.quit()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON-—Ñ–∞–π–ª
    results_file = os.path.join(output_dir, f"responsive_test_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json")
    with open(results_file, 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {results_file}")
    
    return results


def generate_html_report(results, output_file=None):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML-–æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–∑—ã–≤—á–∏–≤–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞.
    
    Args:
        results (dict): –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        output_file (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HTML-–æ—Ç—á–µ—Ç–∞
        
    Returns:
        str: –ü—É—Ç—å –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É HTML-–æ—Ç—á–µ—Ç—É
    """
    # –ï—Å–ª–∏ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ —É–∫–∞–∑–∞–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if not output_file:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = os.path.join(os.path.dirname(list(results["devices"].values())[0]["screenshot"]), 
                                  f"responsive_test_report_{timestamp}.html")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —Ç–∏–ø—É
    devices_by_type = {
        "desktop": [],
        "tablet": [],
        "mobile": []
    }
    
    for device_name, device_data in results["devices"].items():
        device_type = device_data["device_type"]
        devices_by_type[device_type].append({
            "name": device_name,
            "data": device_data
        })
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML
    html = f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–∑—ã–≤—á–∏–≤–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞ - {results["url"]}</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }}
        h1, h2, h3 {{
            color: #2c3e50;
        }}
        .report-header {{
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 5px;
            margin-bottom: 30px;
        }}
        .device-section {{
            margin-bottom: 50px;
        }}
        .device-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
        }}
        .device-card {{
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 15px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }}
        .device-card h3 {{
            margin-top: 0;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
        }}
        .device-info {{
            margin-bottom: 15px;
        }}
        .screenshot {{
            width: 100%;
            border: 1px solid #ddd;
            border-radius: 5px;
        }}
        .timestamp {{
            color: #6c757d;
            font-size: 0.9em;
            margin-top: 30px;
        }}
    </style>
</head>
<body>
    <div class="report-header">
        <h1>–û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–∑—ã–≤—á–∏–≤–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞</h1>
        <p><strong>URL:</strong> {results["url"]}</p>
        <p><strong>–î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</strong> {datetime.fromisoformat(results["timestamp"]).strftime('%d.%m.%Y %H:%M:%S')}</p>
    </div>
    
    <div class="device-section">
        <h2>–î–µ—Å–∫—Ç–æ–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</h2>
        <div class="device-grid">
            {"".join(f'''
            <div class="device-card">
                <h3>{device["name"]}</h3>
                <div class="device-info">
                    <p><strong>–†–∞–∑–º–µ—Ä:</strong> {device["data"]["size"]}</p>
                    <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {device["data"]["description"]}</p>
                </div>
                <img src="{os.path.basename(device["data"]["screenshot"])}" alt="–°–∫—Ä–∏–Ω—à–æ—Ç {device["name"]}" class="screenshot">
            </div>
            ''' for device in devices_by_type["desktop"])}
        </div>
    </div>
    
    <div class="device-section">
        <h2>–ü–ª–∞–Ω—à–µ—Ç–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</h2>
        <div class="device-grid">
            {"".join(f'''
            <div class="device-card">
                <h3>{device["name"]}</h3>
                <div class="device-info">
                    <p><strong>–†–∞–∑–º–µ—Ä:</strong> {device["data"]["size"]}</p>
                    <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {device["data"]["description"]}</p>
                </div>
                <img src="{os.path.basename(device["data"]["screenshot"])}" alt="–°–∫—Ä–∏–Ω—à–æ—Ç {device["name"]}" class="screenshot">
            </div>
            ''' for device in devices_by_type["tablet"])}
        </div>
    </div>
    
    <div class="device-section">
        <h2>–ú–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</h2>
        <div class="device-grid">
            {"".join(f'''
            <div class="device-card">
                <h3>{device["name"]}</h3>
                <div class="device-info">
                    <p><strong>–†–∞–∑–º–µ—Ä:</strong> {device["data"]["size"]}</p>
                    <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {device["data"]["description"]}</p>
                </div>
                <img src="{os.path.basename(device["data"]["screenshot"])}" alt="–°–∫—Ä–∏–Ω—à–æ—Ç {device["name"]}" class="screenshot">
            </div>
            ''' for device in devices_by_type["mobile"])}
        </div>
    </div>
    
    <p class="timestamp">–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</p>
</body>
</html>
"""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML-–æ—Ç—á–µ—Ç
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(html)
    
    return output_file


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤—á–∏–≤–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö')
    parser.add_argument('url', help='URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    parser.add_argument('-o', '--output-dir', default='screenshots', help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤')
    parser.add_argument('-d', '--devices', nargs='+', help='–°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--no-headless', action='store_true', help='–ó–∞–ø—É—Å–∫–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –≤ –≤–∏–¥–∏–º–æ–º —Ä–µ–∂–∏–º–µ')
    parser.add_argument('--html', action='store_true', help='–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HTML-–æ—Ç—á–µ—Ç')
    parser.add_argument('--html-output', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HTML-–æ—Ç—á–µ—Ç–∞')
    
    args = parser.parse_args()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    results = test_responsive_design(
        args.url, 
        args.output_dir, 
        args.devices, 
        not args.no_headless
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML-–æ—Ç—á–µ—Ç, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–ª–∞–≥ --html
    if args.html:
        html_path = generate_html_report(results, args.html_output)
        print(f"‚úÖ HTML-–æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {html_path}")