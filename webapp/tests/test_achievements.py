"""
–¢–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–µ–π –∏ API —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π,
—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é 9.3.
"""

from django.test import TestCase, Client
from django.contrib.auth.models import User
from django.urls import reverse
from django.utils import timezone
from datetime import timedelta
import json

from webapp.models import (
    Achievement, UserAchievement, AchievementNotification,
    UserProfile, FeedingSession, WeightRecord, BloodPressureRecord
)


class AchievementModelTest(TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–∏ Achievement."""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        self.user = User.objects.create_user(
            username='testuser',
            email='test@example.com',
            password='testpass123'
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_profile = UserProfile.objects.create(
            user=self.user,
            pregnancy_status='pregnant',
            pregnancy_week=20,
            experience_level='first_time'
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        self.achievement = Achievement.objects.create(
            title='–ü–µ—Ä–≤–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ',
            description='–ó–∞–ø–∏—Å–∞—Ç—å –ø–µ—Ä–≤—ã–π —Å–µ–∞–Ω—Å –∫–æ—Ä–º–ª–µ–Ω–∏—è',
            achievement_type='feeding_milestone',
            difficulty='easy',
            icon='üçº',
            points=10,
            condition_type='feeding_sessions',
            condition_value=1
        )
    
    def test_achievement_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è."""
        self.assertEqual(self.achievement.title, '–ü–µ—Ä–≤–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ')
        self.assertEqual(self.achievement.points, 10)
        self.assertEqual(self.achievement.condition_type, 'feeding_sessions')
        self.assertTrue(self.achievement.is_active)
        self.assertFalse(self.achievement.is_hidden)
    
    def test_achievement_str_representation(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è."""
        expected = f'{self.achievement.icon} {self.achievement.title} ({self.achievement.points} –æ—á–∫–æ–≤)'
        self.assertEqual(str(self.achievement), expected)
    
    def test_check_condition_feeding_sessions(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å–µ—Å—Å–∏–π –∫–æ—Ä–º–ª–µ–Ω–∏—è."""
        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
        is_completed, progress = self.achievement.check_condition_for_user(self.user)
        self.assertFalse(is_completed)
        self.assertEqual(progress, 0)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∫–æ—Ä–º–ª–µ–Ω–∏—è
        FeedingSession.objects.create(
            user=self.user,
            feeding_type='breast',
            left_breast_duration=timedelta(minutes=10)
        )
        
        # –¢–µ–ø–µ—Ä—å —É—Å–ª–æ–≤–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
        is_completed, progress = self.achievement.check_condition_for_user(self.user)
        self.assertTrue(is_completed)
        self.assertEqual(progress, 1)
    
    def test_check_condition_pregnancy_week(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏—è –¥–ª—è –Ω–µ–¥–µ–ª–∏ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏."""
        pregnancy_achievement = Achievement.objects.create(
            title='20 –Ω–µ–¥–µ–ª—å –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏',
            description='–î–æ—Å—Ç–∏–≥–Ω—É—Ç—å 20 –Ω–µ–¥–µ–ª–∏ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏',
            achievement_type='pregnancy_milestone',
            condition_type='pregnancy_week',
            condition_value=20
        )
        
        # –£—Å–ª–æ–≤–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 20 –Ω–µ–¥–µ–ª—è)
        is_completed, progress = pregnancy_achievement.check_condition_for_user(self.user)
        self.assertTrue(is_completed)
        self.assertEqual(progress, 20)
    
    def test_get_progress_for_user(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        progress_info = self.achievement.get_progress_for_user(self.user)
        
        self.assertFalse(progress_info['is_completed'])
        self.assertEqual(progress_info['current_progress'], 0)
        self.assertEqual(progress_info['target_value'], 1)
        self.assertEqual(progress_info['progress_percentage'], 0)
    
    def test_get_available_achievements_for_user(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        # –°–æ–∑–¥–∞–µ–º –µ—â–µ –æ–¥–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        Achievement.objects.create(
            title='–í—Ç–æ—Ä–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ',
            description='–¢–µ—Å—Ç–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ',
            achievement_type='app_usage',
            condition_type='feeding_sessions',
            condition_value=5
        )
        
        available = Achievement.get_available_achievements_for_user(self.user)
        self.assertEqual(available.count(), 2)
        
        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –æ–¥–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        UserAchievement.objects.create(user=self.user, achievement=self.achievement)
        
        # –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ
        available = Achievement.get_available_achievements_for_user(self.user)
        self.assertEqual(available.count(), 1)
    
    def test_check_and_award_achievements(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π."""
        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        new_achievements = Achievement.check_and_award_achievements(self.user)
        self.assertEqual(len(new_achievements), 0)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∫–æ—Ä–º–ª–µ–Ω–∏—è
        FeedingSession.objects.create(
            user=self.user,
            feeding_type='breast',
            left_breast_duration=timedelta(minutes=10)
        )
        
        # –¢–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∏—Å–≤–æ–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        new_achievements = Achievement.check_and_award_achievements(self.user)
        self.assertEqual(len(new_achievements), 1)
        self.assertEqual(new_achievements[0].achievement, self.achievement)


class UserAchievementModelTest(TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–∏ UserAchievement."""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        self.user = User.objects.create_user(
            username='testuser',
            email='test@example.com',
            password='testpass123'
        )
        
        self.achievement = Achievement.objects.create(
            title='–¢–µ—Å—Ç–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ',
            description='–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
            achievement_type='app_usage',
            points=15
        )
        
        self.user_achievement = UserAchievement.objects.create(
            user=self.user,
            achievement=self.achievement
        )
    
    def test_user_achievement_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        self.assertEqual(self.user_achievement.user, self.user)
        self.assertEqual(self.user_achievement.achievement, self.achievement)
        self.assertFalse(self.user_achievement.is_viewed)
    
    def test_days_since_earned(self):
        """–¢–µ—Å—Ç –ø–æ–¥—Å—á–µ—Ç–∞ –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è."""
        # –¢–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å 0 –¥–Ω–µ–π
        self.assertEqual(self.user_achievement.days_since_earned, 0)
    
    def test_mark_as_viewed(self):
        """–¢–µ—Å—Ç –æ—Ç–º–µ—Ç–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ."""
        self.assertFalse(self.user_achievement.is_viewed)
        
        self.user_achievement.mark_as_viewed()
        self.user_achievement.refresh_from_db()
        
        self.assertTrue(self.user_achievement.is_viewed)
    
    def test_get_recent_achievements(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π."""
        recent = UserAchievement.get_recent_achievements(self.user, days=7)
        self.assertEqual(recent.count(), 1)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        old_achievement = Achievement.objects.create(
            title='–°—Ç–∞—Ä–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ',
            description='–°—Ç–∞—Ä–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
            achievement_type='app_usage'
        )
        old_user_achievement = UserAchievement.objects.create(
            user=self.user,
            achievement=old_achievement
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞ 10 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
        old_date = timezone.now() - timedelta(days=10)
        old_user_achievement.earned_at = old_date
        old_user_achievement.save()
        
        # –ù–µ–¥–∞–≤–Ω–∏—Ö –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ
        recent = UserAchievement.get_recent_achievements(self.user, days=7)
        self.assertEqual(recent.count(), 1)
    
    def test_get_user_statistics(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        # –°–æ–∑–¥–∞–µ–º –µ—â–µ –æ–¥–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        achievement2 = Achievement.objects.create(
            title='–í—Ç–æ—Ä–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ',
            description='–û–ø–∏—Å–∞–Ω–∏–µ',
            achievement_type='feeding_milestone',
            difficulty='hard',
            points=25
        )
        UserAchievement.objects.create(user=self.user, achievement=achievement2)
        
        stats = UserAchievement.get_user_statistics(self.user)
        
        self.assertEqual(stats['total_achievements'], 2)
        self.assertEqual(stats['total_points'], 40)  # 15 + 25
        self.assertIn('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', stats['achievements_by_type'])
        self.assertIn('–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤ –∫–æ—Ä–º–ª–µ–Ω–∏–∏', stats['achievements_by_type'])


class AchievementNotificationModelTest(TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–∏ AchievementNotification."""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        self.user = User.objects.create_user(
            username='testuser',
            email='test@example.com',
            password='testpass123'
        )
        
        self.achievement = Achievement.objects.create(
            title='–¢–µ—Å—Ç–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ',
            description='–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
            achievement_type='app_usage',
            points=10
        )
    
    def test_create_achievement_notification(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏."""
        notification = AchievementNotification.create_achievement_notification(
            self.user, self.achievement
        )
        
        self.assertEqual(notification.user, self.user)
        self.assertEqual(notification.achievement, self.achievement)
        self.assertEqual(notification.notification_type, 'achievement_earned')
        self.assertEqual(notification.status, 'pending')
        self.assertIn(self.achievement.title, notification.title)
    
    def test_mark_as_sent(self):
        """–¢–µ—Å—Ç –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ."""
        notification = AchievementNotification.create_achievement_notification(
            self.user, self.achievement
        )
        
        self.assertEqual(notification.status, 'pending')
        self.assertIsNone(notification.sent_at)
        
        notification.mark_as_sent()
        notification.refresh_from_db()
        
        self.assertEqual(notification.status, 'sent')
        self.assertIsNotNone(notification.sent_at)
    
    def test_mark_as_read(self):
        """–¢–µ—Å—Ç –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ."""
        notification = AchievementNotification.create_achievement_notification(
            self.user, self.achievement
        )
        
        notification.mark_as_read()
        notification.refresh_from_db()
        
        self.assertEqual(notification.status, 'read')
        self.assertIsNotNone(notification.read_at)
    
    def test_get_unread_notifications(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notification1 = AchievementNotification.create_achievement_notification(
            self.user, self.achievement
        )
        
        achievement2 = Achievement.objects.create(
            title='–í—Ç–æ—Ä–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ',
            description='–û–ø–∏—Å–∞–Ω–∏–µ',
            achievement_type='app_usage'
        )
        notification2 = AchievementNotification.create_achievement_notification(
            self.user, achievement2
        )
        
        # –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏
        unread = AchievementNotification.get_unread_notifications(self.user)
        self.assertEqual(unread.count(), 2)
        
        # –û—Ç–º–µ—á–∞–µ–º –æ–¥–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
        notification1.mark_as_read()
        
        # –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ
        unread = AchievementNotification.get_unread_notifications(self.user)
        self.assertEqual(unread.count(), 1)


class AchievementAPITest(TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è API —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π."""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        self.client = Client()
        self.user = User.objects.create_user(
            username='testuser',
            email='test@example.com',
            password='testpass123'
        )
        
        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
        self.client.login(username='testuser', password='testpass123')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        self.achievement1 = Achievement.objects.create(
            title='–ü–µ—Ä–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ',
            description='–û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
            achievement_type='feeding_milestone',
            difficulty='easy',
            points=10,
            condition_type='feeding_sessions',
            condition_value=1
        )
        
        self.achievement2 = Achievement.objects.create(
            title='–í—Ç–æ—Ä–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ',
            description='–û–ø–∏—Å–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
            achievement_type='pregnancy_milestone',
            difficulty='medium',
            points=20,
            condition_type='weight_records',
            condition_value=5
        )
    
    def test_achievement_list_api(self):
        """–¢–µ—Å—Ç API —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π."""
        url = reverse('webapp:achievement_list')
        response = self.client.get(url)
        
        self.assertEqual(response.status_code, 200)
        data = response.json()
        
        self.assertTrue(data['success'])
        self.assertEqual(len(data['achievements']), 2)
        self.assertIn('pagination', data)
    
    def test_achievement_list_api_with_filters(self):
        """–¢–µ—Å—Ç API —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏."""
        url = reverse('webapp:achievement_list')
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
        response = self.client.get(url, {'type': 'feeding_milestone'})
        data = response.json()
        
        self.assertTrue(data['success'])
        self.assertEqual(len(data['achievements']), 1)
        self.assertEqual(data['achievements'][0]['type'], 'feeding_milestone')
    
    def test_achievement_stats_api(self):
        """–¢–µ—Å—Ç API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π."""
        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –æ–¥–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        UserAchievement.objects.create(user=self.user, achievement=self.achievement1)
        
        url = reverse('webapp:achievement_stats')
        response = self.client.get(url)
        
        self.assertEqual(response.status_code, 200)
        data = response.json()
        
        self.assertTrue(data['success'])
        self.assertEqual(data['statistics']['total_achievements'], 1)
        self.assertEqual(data['statistics']['total_points'], 10)
        self.assertIn('completion_percentage', data['statistics'])
    
    def test_check_achievements_api(self):
        """–¢–µ—Å—Ç API –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π."""
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∫–æ—Ä–º–ª–µ–Ω–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏—è
        FeedingSession.objects.create(
            user=self.user,
            feeding_type='breast',
            left_breast_duration=timedelta(minutes=10)
        )
        
        url = reverse('webapp:check_achievements')
        response = self.client.post(url)
        
        self.assertEqual(response.status_code, 200)
        data = response.json()
        
        self.assertTrue(data['success'])
        self.assertEqual(data['count'], 1)
        self.assertEqual(len(data['new_achievements']), 1)
        self.assertEqual(data['new_achievements'][0]['title'], '–ü–µ—Ä–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ')
    
    def test_achievement_detail_api(self):
        """–¢–µ—Å—Ç API –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏."""
        url = reverse('webapp:achievement_detail', kwargs={'achievement_id': self.achievement1.id})
        response = self.client.get(url)
        
        self.assertEqual(response.status_code, 200)
        data = response.json()
        
        self.assertTrue(data['success'])
        self.assertEqual(data['achievement']['title'], '–ü–µ—Ä–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ')
        self.assertEqual(data['achievement']['points'], 10)
        self.assertFalse(data['achievement']['is_earned'])
    
    def test_achievement_notifications_api(self):
        """–¢–µ—Å—Ç API —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö."""
        # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification = AchievementNotification.create_achievement_notification(
            self.user, self.achievement1
        )
        
        url = reverse('webapp:achievement_notifications')
        response = self.client.get(url)
        
        self.assertEqual(response.status_code, 200)
        data = response.json()
        
        self.assertTrue(data['success'])
        self.assertEqual(len(data['notifications']), 1)
        self.assertEqual(data['unread_count'], 1)
    
    def test_mark_notifications_as_read(self):
        """–¢–µ—Å—Ç –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö."""
        # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification1 = AchievementNotification.create_achievement_notification(
            self.user, self.achievement1
        )
        notification2 = AchievementNotification.create_achievement_notification(
            self.user, self.achievement2
        )
        
        url = reverse('webapp:achievement_notifications')
        
        # –û—Ç–º–µ—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        response = self.client.post(
            url,
            json.dumps({'notification_ids': [notification1.id]}),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, 200)
        data = response.json()
        self.assertTrue(data['success'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
        notification1.refresh_from_db()
        self.assertEqual(notification1.status, 'read')
        
        # –í—Ç–æ—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º
        notification2.refresh_from_db()
        self.assertEqual(notification2.status, 'pending')
    
    def test_unauthorized_access(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
        self.client.logout()
        
        url = reverse('webapp:achievement_list')
        response = self.client.get(url)
        
        # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        self.assertEqual(response.status_code, 302)


class AchievementIntegrationTest(TestCase):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π."""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        self.user = User.objects.create_user(
            username='testuser',
            email='test@example.com',
            password='testpass123'
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_profile = UserProfile.objects.create(
            user=self.user,
            pregnancy_status='pregnant',
            pregnancy_week=15
        )
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.feeding_achievement = Achievement.objects.create(
            title='–ü–µ—Ä–≤–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ',
            description='–ó–∞–ø–∏—Å–∞—Ç—å –ø–µ—Ä–≤—ã–π —Å–µ–∞–Ω—Å –∫–æ—Ä–º–ª–µ–Ω–∏—è',
            achievement_type='feeding_milestone',
            condition_type='feeding_sessions',
            condition_value=1,
            points=10
        )
        
        self.weight_achievement = Achievement.objects.create(
            title='–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–µ—Å–∞',
            description='–ó–∞–ø–∏—Å–∞—Ç—å 3 –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤–µ—Å–∞',
            achievement_type='health_milestone',
            condition_type='weight_records',
            condition_value=3,
            points=15
        )
        
        self.pregnancy_achievement = Achievement.objects.create(
            title='–í—Ç–æ—Ä–æ–π —Ç—Ä–∏–º–µ—Å—Ç—Ä',
            description='–î–æ—Å—Ç–∏—á—å 14 –Ω–µ–¥–µ–ª–∏ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏',
            achievement_type='pregnancy_milestone',
            condition_type='pregnancy_week',
            condition_value=14,
            points=20
        )
    
    def test_full_achievement_workflow(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π."""
        # 1. –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        user_achievements = UserAchievement.objects.filter(user=self.user)
        self.assertEqual(user_achievements.count(), 0)
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∏—Å–≤–æ–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å
        new_achievements = Achievement.check_and_award_achievements(self.user)
        self.assertEqual(len(new_achievements), 1)
        self.assertEqual(new_achievements[0].achievement, self.pregnancy_achievement)
        
        # 3. –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∫–æ—Ä–º–ª–µ–Ω–∏—è
        FeedingSession.objects.create(
            user=self.user,
            feeding_type='breast',
            left_breast_duration=timedelta(minutes=10)
        )
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–Ω–æ–≤–∞ - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∏—Å–≤–æ–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –∫–æ—Ä–º–ª–µ–Ω–∏–µ
        new_achievements = Achievement.check_and_award_achievements(self.user)
        self.assertEqual(len(new_achievements), 1)
        self.assertEqual(new_achievements[0].achievement, self.feeding_achievement)
        
        # 5. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤–µ—Å–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
        base_date = timezone.now()
        for i in range(3):
            WeightRecord.objects.create(
                user=self.user,
                weight=65.0 + i,
                date=base_date - timedelta(days=i)
            )
        
        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∏—Å–≤–æ–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–µ—Å–∞
        new_achievements = Achievement.check_and_award_achievements(self.user)
        self.assertEqual(len(new_achievements), 1)
        self.assertEqual(new_achievements[0].achievement, self.weight_achievement)
        
        # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = UserAchievement.get_user_statistics(self.user)
        self.assertEqual(stats['total_achievements'], 3)
        self.assertEqual(stats['total_points'], 45)  # 10 + 15 + 20
        
        # 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã (—Å–æ–∑–¥–∞–µ–º –∏—Ö –≤—Ä—É—á–Ω—É—é –¥–ª—è —Ç–µ—Å—Ç–∞)
        user_achievements = UserAchievement.objects.filter(user=self.user)
        for ua in user_achievements:
            AchievementNotification.create_achievement_notification(self.user, ua.achievement)
        
        notifications = AchievementNotification.objects.filter(user=self.user)
        self.assertEqual(notifications.count(), 3)
    
    def test_achievement_progress_tracking(self):
        """–¢–µ—Å—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –≤–µ—Å—É (–Ω—É–∂–Ω–æ 3 –∑–∞–ø–∏—Å–∏)
        progress = self.weight_achievement.get_progress_for_user(self.user)
        self.assertEqual(progress['current_progress'], 0)
        self.assertEqual(progress['progress_percentage'], 0)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –≤–µ—Å–∞
        base_date = timezone.now()
        WeightRecord.objects.create(user=self.user, weight=65.0, date=base_date)
        
        progress = self.weight_achievement.get_progress_for_user(self.user)
        self.assertEqual(progress['current_progress'], 1)
        self.assertEqual(progress['progress_percentage'], 33)  # 1/3 * 100
        
        # –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –¥–≤–µ –∑–∞–ø–∏—Å–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
        WeightRecord.objects.create(user=self.user, weight=65.5, date=base_date - timedelta(days=1))
        WeightRecord.objects.create(user=self.user, weight=66.0, date=base_date - timedelta(days=2))
        
        progress = self.weight_achievement.get_progress_for_user(self.user)
        self.assertEqual(progress['current_progress'], 3)
        self.assertEqual(progress['progress_percentage'], 100)
        self.assertTrue(progress['is_completed'])