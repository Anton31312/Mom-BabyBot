#!/usr/bin/env python
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
"""
import os
import sys
import django
import subprocess

def test_django_startup():
    """–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ Django –±–µ–∑ –æ—à–∏–±–æ–∫ SQLAlchemy"""
    print("üß™ –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ Django...")
    
    try:
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mom_baby_bot.settings_prod')
        django.setup()
        
        from django.conf import settings
        print(f"‚úÖ Django –∑–∞–ø—É—â–µ–Ω: DEBUG={settings.DEBUG}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Django: {e}")
        return False

def test_django_migrations():
    """–¢–µ—Å—Ç Django –º–∏–≥—Ä–∞—Ü–∏–π"""
    print("\nüß™ –¢–µ—Å—Ç Django –º–∏–≥—Ä–∞—Ü–∏–π...")
    
    try:
        result = subprocess.run([
            'python', 'manage.py', 'migrate', '--noinput'
        ], capture_output=True, text=True, env={
            **os.environ,
            'DJANGO_SETTINGS_MODULE': 'mom_baby_bot.settings_prod'
        })
        
        if result.returncode == 0:
            print("‚úÖ Django –º–∏–≥—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        return False

def test_sqlalchemy_init():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLAlchemy"""
    print("\nüß™ –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLAlchemy...")
    
    try:
        result = subprocess.run([
            'python', 'manage.py', 'init_sqlalchemy'
        ], capture_output=True, text=True, env={
            **os.environ,
            'DJANGO_SETTINGS_MODULE': 'mom_baby_bot.settings_prod'
        })
        
        if result.returncode == 0:
            print("‚úÖ SQLAlchemy –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLAlchemy: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SQLAlchemy: {e}")
        return False

def test_health_endpoint():
    """–¢–µ—Å—Ç health endpoint"""
    print("\nüß™ –¢–µ—Å—Ç health endpoint...")
    
    try:
        from mom_baby_bot.urls import health_check
        from django.http import HttpRequest
        
        request = HttpRequest()
        response = health_check(request)
        
        if response.status_code == 200:
            print("‚úÖ Health endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"‚ùå Health endpoint –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ health endpoint: {e}")
        return False

def test_sqlite_database():
    """–¢–µ—Å—Ç SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüß™ –¢–µ—Å—Ç SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        import sqlite3
        db_path = '/app/data/mom_baby_bot.db'
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(db_path), exist_ok=True)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT name FROM sqlite_master WHERE type="table"')
        tables = cursor.fetchall()
        conn.close()
        
        print(f"‚úÖ SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def main():
    print("üîç –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã\n")
    
    tests = [
        ("SQLite Database", test_sqlite_database),
        ("Django Startup", test_django_startup),
        ("Django Migrations", test_django_migrations),
        ("SQLAlchemy Init", test_sqlalchemy_init),
        ("Health Endpoint", test_health_endpoint),
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"--- {test_name} ---")
        try:
            result = test_func()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ {test_name}: {e}")
            results.append(False)
    
    print(f"\nüìä –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {sum(results)}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if all(results):
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –Ω–∞ Amvera!")
        print("\nüìã –ß—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é SECRET_KEY –≤ –ø–∞–Ω–µ–ª–∏ Amvera")
        print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ALLOWED_HOSTS —Å –≤–∞—à–∏–º –¥–æ–º–µ–Ω–æ–º")
        print("3. –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: TELEGRAM_BOT_TOKEN –∏ –¥—Ä—É–≥–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –±–æ—Ç–∞")
        print("4. –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –ø—Ä–æ–µ–∫—Ç - SQLite –±–∞–∑–∞ —Å–æ–∑–¥–∞—Å—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        return 0
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º.")
        return 1

if __name__ == "__main__":
    sys.exit(main())