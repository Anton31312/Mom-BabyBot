"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
—á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞.
"""

import logging
import asyncio
import aiohttp
from django.conf import settings
from botapp.models import User, db_manager
from botapp.models_notification import (
    get_notification_preferences, log_notification
)

logger = logging.getLogger(__name__)

class TelegramNotifier:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram API.
    """
    
    def __init__(self):
        self.bot_token = settings.TELEGRAM_BOT_TOKEN
        self.api_url = f"https://api.telegram.org/bot{self.bot_token}"
    
    async def send_message(self, chat_id, text, parse_mode="HTML", disable_notification=False):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram API.
        
        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            chat_id (int): ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (telegram_id)
            text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode (str, optional): –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (HTML, Markdown)
            disable_notification (bool, optional): –û—Ç–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            dict: –û—Ç–≤–µ—Ç –æ—Ç Telegram API –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        url = f"{self.api_url}/sendMessage"
        payload = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": parse_mode,
            "disable_notification": disable_notification
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=payload) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        error_text = await response.text()
                        logger.error(f"Error sending Telegram message: {error_text}")
                        return None
        except Exception as e:
            logger.error(f"Exception sending Telegram message: {e}")
            return None
    
    async def send_notification(self, user_id, notification_type, entity_id, text, disable_notification=False):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —É—á–µ—Ç–æ–º –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
        
        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            notification_type (str): –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            entity_id (int): ID —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
            text (str): –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            disable_notification (bool, optional): –û—Ç–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
        """
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session = db_manager.get_session()
        try:
            user = session.query(User).filter_by(id=user_id).first()
            if not user:
                logger.error(f"User with ID {user_id} not found")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            preferences = get_notification_preferences(user_id)
            
            # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã, –≤—ã—Ö–æ–¥–∏–º
            if not preferences or not preferences.enabled or not preferences.telegram_enabled:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if notification_type == 'sleep' and not preferences.sleep_timer_notifications:
                return False
            elif notification_type == 'feeding' and not preferences.feeding_timer_notifications:
                return False
            elif notification_type == 'contraction' and not preferences.contraction_counter_notifications:
                return False
            elif notification_type == 'kick' and not preferences.kick_counter_notifications:
                return False
            elif notification_type == 'vaccine' and not preferences.vaccine_reminder_notifications:
                return False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            result = await self.send_message(
                chat_id=user.telegram_id,
                text=text,
                disable_notification=disable_notification
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
            status = 'sent' if result else 'failed'
            log_notification(
                user_id=user_id,
                notification_type=notification_type,
                entity_id=entity_id,
                channel='telegram',
                content=text,
                status=status
            )
            
            return bool(result)
        except Exception as e:
            logger.error(f"Error sending notification: {e}")
            return False
        finally:
            db_manager.close_session(session)


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
telegram_notifier = TelegramNotifier()


def send_telegram_notification(user_id, notification_type, entity_id, text, disable_notification=False):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        notification_type (str): –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        entity_id (int): ID —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
        text (str): –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        disable_notification (bool, optional): –û—Ç–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
    """
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        return loop.run_until_complete(
            telegram_notifier.send_notification(
                user_id, notification_type, entity_id, text, disable_notification
            )
        )
    finally:
        loop.close()


def format_sleep_notification(child_name, duration_minutes, sleep_type):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–Ω–µ.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        child_name (str): –ò–º—è —Ä–µ–±–µ–Ω–∫–∞
        duration_minutes (int): –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
        sleep_type (str): –¢–∏–ø —Å–Ω–∞ ('day' –∏–ª–∏ 'night')
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    hours = duration_minutes // 60
    minutes = duration_minutes % 60
    
    if hours > 0:
        duration_text = f"{hours} —á {minutes} –º–∏–Ω"
    else:
        duration_text = f"{minutes} –º–∏–Ω"
    
    sleep_type_text = "–¥–Ω–µ–≤–Ω–æ–≥–æ" if sleep_type == "day" else "–Ω–æ—á–Ω–æ–≥–æ"
    
    return f"üõå <b>–°–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n" \
           f"–†–µ–±–µ–Ω–æ–∫: <b>{child_name}</b>\n" \
           f"–¢–∏–ø: <b>{sleep_type_text}</b>\n" \
           f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{duration_text}</b>"


def format_feeding_notification(child_name, feeding_type, amount=None, duration=None, breast=None):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        child_name (str): –ò–º—è —Ä–µ–±–µ–Ω–∫–∞
        feeding_type (str): –¢–∏–ø –∫–æ—Ä–º–ª–µ–Ω–∏—è ('breast' –∏–ª–∏ 'bottle')
        amount (float, optional): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –º–ª (–¥–ª—è –±—É—Ç—ã–ª–æ—á–∫–∏)
        duration (int, optional): –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö (–¥–ª—è –≥—Ä—É–¥–∏)
        breast (str, optional): –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≥—Ä—É–¥—å ('left', 'right', 'both')
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    if feeding_type == 'bottle':
        return f"üçº <b>–ö–æ—Ä–º–ª–µ–Ω–∏–µ –∏–∑ –±—É—Ç—ã–ª–æ—á–∫–∏</b>\n\n" \
               f"–†–µ–±–µ–Ω–æ–∫: <b>{child_name}</b>\n" \
               f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{amount} –º–ª</b>"
    else:
        breast_text = {
            'left': '–ª–µ–≤–∞—è',
            'right': '–ø—Ä–∞–≤–∞—è',
            'both': '–æ–±–µ'
        }.get(breast, '')
        
        return f"ü§± <b>–ì—Ä—É–¥–Ω–æ–µ –≤—Å–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏–µ</b>\n\n" \
               f"–†–µ–±–µ–Ω–æ–∫: <b>{child_name}</b>\n" \
               f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{duration} –º–∏–Ω</b>\n" \
               f"–ì—Ä—É–¥—å: <b>{breast_text}</b>"


def format_contraction_notification(count, avg_interval, duration):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ö–≤–∞—Ç–∫–∞—Ö.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        count (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ö–≤–∞—Ç–æ–∫
        avg_interval (float): –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å—Ö–≤–∞—Ç–∫–∞–º–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
        duration (int): –û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    hours = duration // 60
    minutes = duration % 60
    
    if hours > 0:
        duration_text = f"{hours} —á {minutes} –º–∏–Ω"
    else:
        duration_text = f"{minutes} –º–∏–Ω"
    
    return f"‚è±Ô∏è <b>–°–µ—Å—Å–∏—è —Å—Ö–≤–∞—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n" \
           f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ö–≤–∞—Ç–æ–∫: <b>{count}</b>\n" \
           f"–°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: <b>{avg_interval:.1f} –º–∏–Ω</b>\n" \
           f"–û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{duration_text}</b>"


def format_kick_notification(count, duration):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —à–µ–≤–µ–ª–µ–Ω–∏—è—Ö.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        count (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–µ–≤–µ–ª–µ–Ω–∏–π
        duration (int): –û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    hours = duration // 60
    minutes = duration % 60
    
    if hours > 0:
        duration_text = f"{hours} —á {minutes} –º–∏–Ω"
    else:
        duration_text = f"{minutes} –º–∏–Ω"
    
    return f"üë∂ <b>–°–µ—Å—Å–∏—è —à–µ–≤–µ–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n" \
           f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–µ–≤–µ–ª–µ–Ω–∏–π: <b>{count}</b>\n" \
           f"–û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{duration_text}</b>"


def format_vaccine_notification(child_name, vaccine_name, due_date):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–≤–∏–≤–∫–µ.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        child_name (str): –ò–º—è —Ä–µ–±–µ–Ω–∫–∞
        vaccine_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫—Ü–∏–Ω—ã
        due_date (datetime): –î–∞—Ç–∞ –ø—Ä–∏–≤–∏–≤–∫–∏
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    formatted_date = due_date.strftime("%d.%m.%Y")
    
    return f"üíâ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–≤–∏–≤–∫–µ</b>\n\n" \
           f"–†–µ–±–µ–Ω–æ–∫: <b>{child_name}</b>\n" \
           f"–í–∞–∫—Ü–∏–Ω–∞: <b>{vaccine_name}</b>\n" \
           f"–î–∞—Ç–∞: <b>{formatted_date}</b>"