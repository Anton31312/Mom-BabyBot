"""
Django management command –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLAlchemy
"""
from django.core.management.base import BaseCommand
from django.conf import settings
import os
import logging

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLAlchemy –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'

    def add_arguments(self, parser):
        parser.add_argument(
            '--force',
            action='store_true',
            help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü',
        )

    def handle(self, *args, **options):
        self.stdout.write("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLAlchemy...")
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            database_url = os.getenv('DATABASE_URL', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê')
            self.stdout.write(f"üìä DATABASE_URL: {database_url[:50]}{'...' if len(database_url) > 50 else ''}")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
            self.stdout.write("üì¶ –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π...")
            from botapp.models import User, Base
            from botapp.models_child import Child, Measurement
            
            # –°–æ–∑–¥–∞–µ–º engine
            self.stdout.write("üîó –°–æ–∑–¥–∞–Ω–∏–µ SQLAlchemy engine...")
            from sqlalchemy import create_engine, text
            
            if database_url.startswith('postgresql'):
                engine_options = {
                    'pool_pre_ping': True,
                    'pool_recycle': 300,
                    'pool_size': 5,
                    'max_overflow': 10,
                    'echo': False
                }
            else:
                engine_options = {
                    'pool_pre_ping': True,
                    'pool_recycle': 300,
                    'echo': False
                }
            
            engine = create_engine(database_url, **engine_options)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            self.stdout.write("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
            with engine.connect() as connection:
                connection.execute(text("SELECT 1"))
            self.stdout.write(self.style.SUCCESS("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"))
            
            # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            if options['force']:
                self.stdout.write("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü...")
                Base.metadata.drop_all(engine)
            
            self.stdout.write("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
            Base.metadata.create_all(engine)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.stdout.write("‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
            from botapp.models_base import db_manager
            db_manager.engine = engine
            from sqlalchemy.orm import sessionmaker
            db_manager.Session = sessionmaker(bind=engine)
            
            self.stdout.write(self.style.SUCCESS("üéâ SQLAlchemy —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!"))
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞: {e}"))
            import traceback
            self.stdout.write(traceback.format_exc())
            raise