import logging
import asyncio
from django.core.management.base import BaseCommand
from django.conf import settings
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command as AiogramCommand
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext

from botapp.handlers import *
from botapp.states.states import SurveyStates

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(settings, 'LOG_LEVEL', logging.INFO),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = '–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞'

    def add_arguments(self, parser):
        parser.add_argument(
            '--webhook',
            action='store_true',
            help='–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook',
        )

    def handle(self, *args, **options):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∫–æ–º–∞–Ω–¥—ã"""
        if options['webhook']:
            self.stdout.write('–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook...')
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è webhook —Ä–µ–∂–∏–º–∞
        else:
            self.stdout.write('–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...')
            asyncio.run(self.run_bot())

    async def run_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
            bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
            storage = MemoryStorage()
            dp = Dispatcher(storage=storage)

            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –∫–æ–º–∞–Ω–¥
            dp.message.register(start_survey, AiogramCommand("start"))
            dp.message.register(help_command, AiogramCommand("help"))
            dp.message.register(help_command, lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
            dp.message.register(stats, AiogramCommand("stats"))
            dp.message.register(stats, lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            dp.message.register(webapp_command, AiogramCommand("webapp"))
            dp.message.register(webapp_command, lambda message: message.text == "üåê –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
            dp.message.register(cancel, AiogramCommand("cancel"))
            dp.message.register(web_app_data, lambda message: message.web_app_data is not None)

            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏
            dp.callback_query.register(handle_subscribe, lambda c: c.data == "subscribe")
            dp.callback_query.register(handle_unsubscribe, lambda c: c.data == "unsubscribe")
            dp.callback_query.register(handle_webapp_unavailable, lambda c: c.data == "webapp_unavailable")

            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è –æ–ø—Ä–æ—Å–∞
            dp.message.register(handle_pregnancy_answer, SurveyStates.pregnancy_question)
            dp.message.register(handle_pregnancy_week, SurveyStates.pregnancy_week)
            dp.message.register(handle_baby_question, SurveyStates.baby_question)
            dp.message.register(handle_baby_age, SurveyStates.baby_age)
            dp.message.register(handle_baby_age, SurveyStates.waiting_for_baby_age)

            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
            await self.set_commands(bot)

            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
            await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise
        finally:
            if 'bot' in locals():
                await bot.session.close()

    async def set_commands(self, bot: Bot):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await bot.set_my_commands(BOT_COMMANDS)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            admin_ids = getattr(settings, 'ADMIN_IDS', [])
            for admin_id in admin_ids:
                try:
                    await bot.set_my_commands(
                        ADMIN_COMMANDS, 
                        scope=types.BotCommandScopeChat(chat_id=admin_id)
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}: {e}")
                    
            logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥: {e}")