#!/usr/bin/env python
"""
–¢–µ—Å—Ç –ª–µ–Ω–∏–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLAlchemy
"""
import os
import sys
import django


def test_lazy_initialization():
    """–¢–µ—Å—Ç –ª–µ–Ω–∏–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("üß™ –¢–µ—Å—Ç –ª–µ–Ω–∏–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLAlchemy...")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mom_baby_bot.settings_prod')
    django.setup()

    from django.conf import settings

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ engine –Ω–µ —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
    print(f"SQLALCHEMY_ENGINE –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {settings.SQLALCHEMY_ENGINE}")
    print(f"SQLALCHEMY_SESSION_FACTORY –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {settings.SQLALCHEMY_SESSION_FACTORY}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–µ–Ω–∏–≤—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    if hasattr(settings, 'get_sqlalchemy_engine'):
        print("‚úÖ –§—É–Ω–∫—Ü–∏—è get_sqlalchemy_engine –¥–æ—Å—Ç—É–ø–Ω–∞")

        # –°–æ–∑–¥–∞–µ–º engine —á–µ—Ä–µ–∑ –ª–µ–Ω–∏–≤—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        engine = settings.get_sqlalchemy_engine()
        print(f"‚úÖ Engine —Å–æ–∑–¥–∞–Ω: {engine}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        from sqlalchemy import text
        with engine.connect() as connection:
            result = connection.execute(text("SELECT 1"))
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {result.fetchone()}")

        return True
    else:
        print("‚ùå –§—É–Ω–∫—Ü–∏—è get_sqlalchemy_engine –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return False


def test_models_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π –±–µ–∑ –∞–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("\nüß™ –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π...")

    try:
        from botapp.models import User
        from botapp.models_child import Child, Measurement
        print("‚úÖ –ú–æ–¥–µ–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –±–µ–∑ –æ—à–∏–±–æ–∫")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        return False


def main():
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–µ–Ω–∏–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLAlchemy\n")

    tests = [
        ("Models Import", test_models_import),
        ("Lazy Initialization", test_lazy_initialization),
    ]

    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ {test_name}: {e}")
            results.append(False)

    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {sum(results)}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")

    if all(results):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏! –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        return 0
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏.")
        return 1


if __name__ == "__main__":
    sys.exit(main())
