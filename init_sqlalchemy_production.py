#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLAlchemy –≤ production
"""
import os
import sys
import django
from django.conf import settings

def main():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLAlchemy –¥–ª—è production"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mom_baby_bot.settings_prod')
    django.setup()
    
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLAlchemy –¥–ª—è production...")
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º
        database_url = os.getenv('DATABASE_URL', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê')
        print(f"üìä DATABASE_URL: {database_url[:50]}{'...' if len(database_url) > 50 else ''}")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
        print("üì¶ –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π...")
        from botapp.models import User, Base
        from botapp.models_child import Child, Measurement
        
        # –°–æ–∑–¥–∞–µ–º engine —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        print("üîó –°–æ–∑–¥–∞–Ω–∏–µ SQLAlchemy engine...")
        from sqlalchemy import create_engine
        
        if database_url.startswith('postgresql'):
            engine_options = {
                'pool_pre_ping': True,
                'pool_recycle': 300,
                'pool_size': 5,
                'max_overflow': 10,
                'echo': False
            }
        else:
            engine_options = {
                'pool_pre_ping': True,
                'pool_recycle': 300,
                'echo': False
            }
        
        engine = create_engine(database_url, **engine_options)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        from sqlalchemy import text
        with engine.connect() as connection:
            connection.execute(text("SELECT 1"))
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        print("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
        Base.metadata.create_all(engine)
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        print("‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
        from botapp.models_base import db_manager
        db_manager.engine = engine
        from sqlalchemy.orm import sessionmaker
        db_manager.Session = sessionmaker(bind=engine)
        
        print("üéâ SQLAlchemy —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è production!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLAlchemy: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)