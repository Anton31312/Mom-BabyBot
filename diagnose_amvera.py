#!/usr/bin/env python
"""
–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è Amvera
"""
import os
import sys
import sqlite3
import logging
import subprocess
import platform

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(levelname)s %(asctime)s %(message)s')
logger = logging.getLogger(__name__)

def system_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"""
    logger.info("üñ•Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ...")
    
    info = {
        "Platform": platform.platform(),
        "Python Version": platform.python_version(),
        "Architecture": platform.architecture(),
        "Current Directory": os.getcwd(),
        "User": os.getenv('USER', 'unknown'),
        "Home": os.getenv('HOME', 'unknown'),
    }
    
    for key, value in info.items():
        logger.info(f"{key}: {value}")
    
    return True

def check_permissions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
    logger.info("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...")
    
    paths_to_check = [
        '/app',
        '/app/data',
        '/tmp',
        '/var/tmp',
        os.getcwd()
    ]
    
    for path in paths_to_check:
        if os.path.exists(path):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ
                os.listdir(path)
                logger.info(f"‚úÖ {path} - –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å
                test_file = os.path.join(path, 'test_write.tmp')
                with open(test_file, 'w') as f:
                    f.write('test')
                os.remove(test_file)
                logger.info(f"‚úÖ {path} - –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏")
                
            except Exception as e:
                logger.error(f"‚ùå {path} - –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏: {e}")
        else:
            logger.warning(f"‚ö†Ô∏è {path} - –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    return True

def check_sqlite():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ SQLite"""
    logger.info("üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ SQLite...")
    
    try:
        import sqlite3
        logger.info(f"‚úÖ SQLite –≤–µ—Ä—Å–∏—è: {sqlite3.sqlite_version}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        test_paths = [
            '/app/data/test.db',
            os.path.join(os.getcwd(), 'test.db'),
            '/tmp/test.db',
            '/var/tmp/test.db'
        ]
        
        for path in test_paths:
            try:
                conn = sqlite3.connect(path, timeout=5)
                cursor = conn.cursor()
                cursor.execute('SELECT sqlite_version()')
                version = cursor.fetchone()[0]
                conn.close()
                os.remove(path)  # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                logger.info(f"‚úÖ SQLite —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –ø—É—Ç–∏: {path} (–≤–µ—Ä—Å–∏—è: {version})")
                break
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è SQLite –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –ø—É—Ç–∏ {path}: {e}")
        else:
            logger.error("‚ùå SQLite –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –ø—É—Ç–∏")
            return False
        
        return True
        
    except ImportError:
        logger.error("‚ùå SQLite –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def check_django():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Django"""
    logger.info("üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ Django...")
    
    try:
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mom_baby_bot.settings_prod')
        import django
        django.setup()
        
        from django.conf import settings
        from django import get_version
        
        logger.info(f"‚úÖ Django –≤–µ—Ä—Å–∏—è: {get_version()}")
        logger.info(f"‚úÖ DEBUG: {settings.DEBUG}")
        logger.info(f"‚úÖ ALLOWED_HOSTS: {settings.ALLOWED_HOSTS}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Django: {e}")
        return False

def check_environment_variables():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    logger.info("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    env_vars = {
        'DJANGO_SETTINGS_MODULE': '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è',
        'SECRET_KEY': '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è',
        'TELEGRAM_BOT_TOKEN': '–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è',
        'WEBHOOK_URL': '–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è',
        'WEBAPP_URL': '–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è',
        'ADMIN_IDS': '–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è',
        'DEBUG': '–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è',
        'PORT': '–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è',
    }
    
    missing_required = []
    present_optional = []
    
    for var, status in env_vars.items():
        value = os.getenv(var)
        if value:
            if status == '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è':
                logger.info(f"‚úÖ {var}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            else:
                logger.info(f"‚úÖ {var}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è)")
                present_optional.append(var)
        else:
            if status == '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è':
                logger.error(f"‚ùå {var}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è)")
                missing_required.append(var)
            else:
                logger.warning(f"‚ö†Ô∏è {var}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è)")
    
    if missing_required:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {missing_required}")
        return False
    
    logger.info("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    logger.info("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    required_packages = [
        'django',
        'sqlalchemy',
        'gunicorn',
        'whitenoise'
    ]
    
    missing = []
    
    for package in required_packages:
        try:
            __import__(package)
            logger.info(f"‚úÖ {package}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            logger.error(f"‚ùå {package}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            missing.append(package)
    
    if missing:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {missing}")
        return False
    
    logger.info("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True

def main():
    logger.info("üöÄ –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è Amvera\n")
    
    checks = [
        ("System Info", system_info),
        ("Check Permissions", check_permissions),
        ("Check SQLite", check_sqlite),
        ("Check Dependencies", check_dependencies),
        ("Check Environment Variables", check_environment_variables),
        ("Check Django", check_django),
    ]
    
    results = []
    
    for check_name, check_func in checks:
        logger.info(f"\n--- {check_name} ---")
        try:
            result = check_func()
            results.append((check_name, result))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {check_name}: {e}")
            results.append((check_name, False))
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("\n" + "="*50)
    logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    logger.info("="*50)
    
    passed = 0
    total = len(results)
    
    for check_name, result in results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ù–ï –ü–†–û–®–ï–õ"
        logger.info(f"{check_name}: {status}")
        if result:
            passed += 1
    
    logger.info(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        logger.info("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ –Ω–∞ Amvera")
        return 0
    else:
        logger.error("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ—à–ª–∏")
        logger.error("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 