#!/usr/bin/env python
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Ñ–∞–π–ª–æ–≤
"""
import os
import sys
import ast
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(levelname)s %(asctime)s %(message)s')
logger = logging.getLogger(__name__)

def check_file_syntax(file_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        ast.parse(content)
        logger.info(f"‚úÖ {file_path} - —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        return True
        
    except SyntaxError as e:
        logger.error(f"‚ùå {file_path} - —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå {file_path} - –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
        return False

def find_python_files(directory):
    """–ü–æ–∏—Å–∫ –≤—Å–µ—Ö Python —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    python_files = []
    
    for root, dirs, files in os.walk(directory):
        # –ò—Å–∫–ª—é—á–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∫—ç—à
        dirs[:] = [d for d in dirs if d not in ['venv', '__pycache__', '.git', 'node_modules']]
        
        for file in files:
            if file.endswith('.py'):
                python_files.append(os.path.join(root, file))
    
    return python_files

def main():
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Ñ–∞–π–ª–æ–≤...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    current_dir = os.getcwd()
    logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {current_dir}")
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ Python —Ñ–∞–π–ª—ã
    python_files = find_python_files(current_dir)
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(python_files)} Python —Ñ–∞–π–ª–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    passed = 0
    failed = 0
    
    for file_path in python_files:
        if check_file_syntax(file_path):
            passed += 1
        else:
            failed += 1
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    logger.info(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    logger.info(f"‚úÖ –ü—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É: {passed}")
    logger.info(f"‚ùå –ù–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É: {failed}")
    logger.info(f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(python_files)}")
    
    if failed == 0:
        logger.info("üéâ –í—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞!")
        return 0
    else:
        logger.error(f"‚ùå {failed} —Ñ–∞–π–ª–æ–≤ –∏–º–µ—é—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 