#!/usr/bin/env python
"""
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""
import os
import sys
import django
import sqlite3

def create_sqlite_db():
    """–°–æ–∑–¥–∞–Ω–∏–µ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    db_path = '/app/data/mom_baby_bot.db'
    db_dir = os.path.dirname(db_path)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        os.makedirs(db_dir, exist_ok=True)
        print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: {db_dir}")
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(db_path)
        conn.close()
        print(f"‚úÖ SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞: {db_path}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SQLite –±–∞–∑—ã: {e}")
        return False

def apply_django_migrations():
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ Django –º–∏–≥—Ä–∞—Ü–∏–π"""
    print("\nüìä –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ Django –º–∏–≥—Ä–∞—Ü–∏–π...")
    
    try:
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mom_baby_bot.settings_prod')
        django.setup()
        
        from django.core.management import execute_from_command_line
        execute_from_command_line(['manage.py', 'migrate', '--noinput'])
        
        print("‚úÖ Django –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        return False

def create_sqlalchemy_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü SQLAlchemy"""
    print("\nüèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü SQLAlchemy...")
    
    try:
        from botapp.models import Base
        from django.conf import settings
        
        if hasattr(settings, 'get_sqlalchemy_engine'):
            engine = settings.get_sqlalchemy_engine()
        else:
            from sqlalchemy import create_engine
            engine = create_engine('sqlite:////app/data/mom_baby_bot.db')
        
        Base.metadata.create_all(engine)
        print("‚úÖ SQLAlchemy —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SQLAlchemy —Ç–∞–±–ª–∏—Ü: {e}")
        return False

def main():
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n")
    
    steps = [
        ("Create SQLite DB", create_sqlite_db),
        ("Apply Django Migrations", apply_django_migrations),
        ("Create SQLAlchemy Tables", create_sqlalchemy_tables),
    ]
    
    for step_name, step_func in steps:
        print(f"\n--- {step_name} ---")
        if not step_func():
            print(f"‚ùå –®–∞–≥ '{step_name}' –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            return 1
    
    print("\nüéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    return 0

if __name__ == "__main__":
    sys.exit(main())