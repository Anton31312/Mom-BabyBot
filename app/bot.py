import logging
import asyncio
import threading
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from app.config import Config
from app.handlers.commands import help_command, stats, webapp_command, BOT_COMMANDS, ADMIN_COMMANDS
from app.handlers.conversation import *
from app.handlers.web_app import web_app_data
from app.handlers.callbacks import handle_subscribe, handle_unsubscribe
from app.states.states import SurveyStates

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=Config.LOG_LEVEL,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
bot = None
dp = None
scheduler = None
bot_thread = None
is_running = False
flask_app = None

def create_bot(app):
    """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""
    global bot, dp, scheduler, flask_app
    flask_app = app
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=Config.TELEGRAM_BOT_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
    scheduler = AsyncIOScheduler()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    with app.app_context():
        app.config['ADMIN_IDS'] = Config.ADMIN_IDS

    # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    async def start_survey_wrapper(message: types.Message, state: FSMContext):
        with app.app_context():
            await start_survey(message, state)

    async def handle_pregnancy_answer_wrapper(message: types.Message, state: FSMContext):
        with app.app_context():
            await handle_pregnancy_answer(message, state)

    async def handle_pregnancy_week_wrapper(message: types.Message, state: FSMContext):
        with app.app_context():
            await handle_pregnancy_week(message, state)

    async def handle_baby_question_wrapper(message: types.Message, state: FSMContext):
        with app.app_context():
            await handle_baby_question(message, state)

    async def handle_baby_age_wrapper(message: types.Message, state: FSMContext):
        with app.app_context():
            await handle_baby_age(message, state)

    async def cancel_wrapper(message: types.Message, state: FSMContext):
        with app.app_context():
            await cancel(message, state)

    async def web_app_data_wrapper(message: types.Message):
        with app.app_context():
            await web_app_data(message)

    async def stats_wrapper(message: types.Message):
        with app.app_context():
            await stats(message)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ —Å –æ–±–µ—Ä—Ç–∫–∞–º–∏
    dp.message.register(start_survey_wrapper, Command("start"))
    dp.message.register(help_command, Command("help"))
    dp.message.register(help_command, lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
    dp.message.register(stats_wrapper, Command("stats"))
    dp.message.register(stats_wrapper, lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    dp.message.register(webapp_command, Command("webapp"))
    dp.message.register(webapp_command, lambda message: message.text == "üåê –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    dp.message.register(cancel_wrapper, Command("cancel"))
    dp.message.register(web_app_data_wrapper, lambda message: message.web_app_data is not None)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏
    dp.callback_query.register(handle_subscribe, lambda c: c.data == "subscribe")
    dp.callback_query.register(handle_unsubscribe, lambda c: c.data == "unsubscribe")

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è –æ–ø—Ä–æ—Å–∞
    dp.message.register(handle_pregnancy_answer_wrapper, SurveyStates.pregnancy_question)
    dp.message.register(handle_pregnancy_week_wrapper, SurveyStates.pregnancy_week)
    dp.message.register(handle_baby_question_wrapper, SurveyStates.baby_question)
    dp.message.register(handle_baby_age_wrapper, SurveyStates.baby_age)

async def set_commands():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await bot.set_my_commands(BOT_COMMANDS)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    for admin_id in Config.ADMIN_IDS:
        try:
            await bot.set_my_commands(ADMIN_COMMANDS, scope=types.BotCommandScopeChat(chat_id=admin_id))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    global is_running
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await set_commands()
        is_running = True
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        is_running = False
        raise
    finally:
        is_running = False
        if bot:
            await bot.session.close()

def run_async_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(main())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        try:
            pending = asyncio.all_tasks(loop)
            for task in pending:
                task.cancel()
            loop.run_until_complete(asyncio.gather(*pending, return_exceptions=True))
            loop.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π: {e}")

def run_bot(app):
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    global bot_thread, is_running
    
    if is_running:
        logger.warning("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        return bot_thread
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    create_bot(app)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_async_bot, name="BotThread")
    bot_thread.daemon = True
    bot_thread.start()
    
    return bot_thread

def stop_bot():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
    global is_running, bot_thread, bot, dp
    
    if not is_running:
        logger.warning("–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        return
    
    is_running = False
    
    try:
        if dp:
            asyncio.run(dp.stop_polling())
        if bot:
            asyncio.run(bot.session.close())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")
    
    if bot_thread and bot_thread.is_alive():
        bot_thread.join(timeout=5)
        if bot_thread.is_alive():
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞")
    
    bot_thread = None
    bot = None
    dp = None
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω") 