#!/usr/bin/env python
"""
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Django –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –±–æ—Ç–∞ –∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Amvera
"""
import os
import sys
import django
import multiprocessing
import time
import signal
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
BASE_DIR = Path(__file__).resolve().parent
sys.path.insert(0, str(BASE_DIR))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mom_baby_bot.settings_prod')
os.environ.setdefault('PORT', '80')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Django
django.setup()

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
        from check_amvera_ready import main as check_ready
        if check_ready() == 0:
            print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞–ª–∞ –ø—Ä–æ–±–ª–µ–º—ã")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        from init_sqlite_amvera import main as init_db
        if init_db() == 0:
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

def run_gunicorn():
    """–ó–∞–ø—É—Å–∫ Django –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å Gunicorn"""
    try:
        from django.core.management import execute_from_command_line
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        print("üìä –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
        execute_from_command_line(['manage.py', 'migrate', '--noinput'])
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        print("üìÅ –°–±–æ—Ä —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤...")
        execute_from_command_line(['manage.py', 'collectstatic', '--noinput', '--clear'])
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º WSGI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        from mom_baby_bot.wsgi import application
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Gunicorn
        port = int(os.getenv('PORT', '80'))
        workers = int(os.getenv('GUNICORN_WORKERS', '2'))
        timeout = int(os.getenv('GUNICORN_TIMEOUT', '120'))
        
        print(f"üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø–æ—Ä—Ç—É {port} —Å {workers} workers...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Gunicorn
        import gunicorn.app.base
        
        class StandaloneApplication(gunicorn.app.base.BaseApplication):
            def __init__(self, app, options=None):
                self.options = options or {}
                self.application = app
                super().__init__()
            
            def load_config(self):
                for key, value in self.options.items():
                    self.cfg.set(key.lower(), value)
            
            def load(self):
                return self.application
        
        options = {
            'bind': f'0.0.0.0:{port}',
            'workers': workers,
            'timeout': timeout,
            'worker_class': 'sync',
            'worker_connections': 1000,
            'max_requests': 1000,
            'max_requests_jitter': 100,
            'keepalive': 5,
            'preload_app': True,
            'accesslog': '-',
            'errorlog': '-',
            'loglevel': 'info',
        }
        
        StandaloneApplication(application, options).run()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        sys.exit(1)

def run_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    try:
        print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        from botapp.management.commands.runbot import Command
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —á–µ—Ä–µ–∑ management –∫–æ–º–∞–Ω–¥—É
        Command.run_bot()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        # –ù–µ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞, —Ç–∞–∫ –∫–∞–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å


def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    print(f"\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    sys.exit(0)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –º–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Mom&Baby Bot –Ω–∞ Amvera...")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_database()
    

    # –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
    processes = []
        
    # –ü—Ä–æ—Ü–µ—Å—Å –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    web_process = multiprocessing.Process(target=run_gunicorn, name="WebApp")
    web_process.start()
    processes.append(web_process)
    print("‚úÖ –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
        
    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    time.sleep(2)
        
    # –ü—Ä–æ—Ü–µ—Å—Å –¥–ª—è –±–æ—Ç–∞
    bot_process = multiprocessing.Process(target=run_bot, name="Bot")
    bot_process.start()
    processes.append(bot_process)
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    try:
        for process in processes:
            process.join()
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
        for process in processes:
            if process.is_alive():
                process.terminate()
                process.join(timeout=5)
                if process.is_alive():
                    process.kill()
        print("‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

if __name__ == '__main__':
    main() 