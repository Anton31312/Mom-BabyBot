#!/usr/bin/env python
"""
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Django –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å Gunicorn –Ω–∞ Amvera
"""
import os
import sys
import django
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
BASE_DIR = Path(__file__).resolve().parent
sys.path.insert(0, str(BASE_DIR))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mom_baby_bot.settings_prod')
os.environ.setdefault('PORT', '80')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Django
django.setup()

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
        from check_amvera_ready import main as check_ready
        if check_ready() == 0:
            print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞–ª–∞ –ø—Ä–æ–±–ª–µ–º—ã")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        from init_sqlite_amvera import main as init_db
        if init_db() == 0:
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

def run_gunicorn():
    """–ó–∞–ø—É—Å–∫ Django –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å Gunicorn"""
    try:
        from django.core.management import execute_from_command_line
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        print("üìä –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
        execute_from_command_line(['manage.py', 'migrate', '--noinput'])
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        print("üìÅ –°–±–æ—Ä —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤...")
        execute_from_command_line(['manage.py', 'collectstatic', '--noinput', '--clear'])
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º WSGI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        from mom_baby_bot.wsgi import application
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Gunicorn
        port = int(os.getenv('PORT', '80'))
        workers = int(os.getenv('GUNICORN_WORKERS', '2'))
        timeout = int(os.getenv('GUNICORN_TIMEOUT', '120'))
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ Gunicorn –Ω–∞ –ø–æ—Ä—Ç—É {port} —Å {workers} workers...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Gunicorn
        import gunicorn.app.base
        
        class StandaloneApplication(gunicorn.app.base.BaseApplication):
            def __init__(self, app, options=None):
                self.options = options or {}
                self.application = app
                super().__init__()
            
            def load_config(self):
                for key, value in self.options.items():
                    self.cfg.set(key.lower(), value)
            
            def load(self):
                return self.application
        
        options = {
            'bind': f'0.0.0.0:{port}',
            'workers': workers,
            'timeout': timeout,
            'worker_class': 'sync',
            'worker_connections': 1000,
            'max_requests': 1000,
            'max_requests_jitter': 100,
            'keepalive': 5,
            'preload_app': True,
            'access_logfile': '-',
            'error_logfile': '-',
            'loglevel': 'info',
        }
        
        StandaloneApplication(application, options).run()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Gunicorn: {e}")
        sys.exit(1)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Mom&Baby Bot —Å Gunicorn –Ω–∞ Amvera...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_database()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Gunicorn
    run_gunicorn()

if __name__ == '__main__':
    main() 