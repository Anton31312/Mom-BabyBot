#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ UI-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–≥–æ —É—Ö–æ–¥–∞.
"""

import os
import sys
import subprocess
import argparse
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å Python
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))


def run_all_ui_tests(server_url, output_dir, run_unit_tests=True, run_responsive_tests=True, run_accessibility_tests=True):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ UI-—Ç–µ—Å—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç—ã.
    
    Args:
        server_url (str): URL —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        output_dir (str): –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤
        run_unit_tests (bool): –ó–∞–ø—É—Å–∫–∞—Ç—å –º–æ–¥—É–ª—å–Ω—ã–µ UI-—Ç–µ—Å—Ç—ã
        run_responsive_tests (bool): –ó–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ—Å—Ç—ã –æ—Ç–∑—ã–≤—á–∏–≤–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
        run_accessibility_tests (bool): –ó–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ—Å—Ç—ã –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    """
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    results = {
        "timestamp": timestamp,
        "server_url": server_url,
        "tests_run": {
            "unit_tests": run_unit_tests,
            "responsive_tests": run_responsive_tests,
            "accessibility_tests": run_accessibility_tests
        },
        "results": {}
    }
    
    # 1. –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–¥—É–ª—å–Ω—ã–µ UI-—Ç–µ—Å—Ç—ã
    if run_unit_tests:
        print("\nüöÄ –ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—å–Ω—ã—Ö UI-—Ç–µ—Å—Ç–æ–≤...")
        unit_test_output = os.path.join(output_dir, f"unit_test_results_{timestamp}.txt")
        
        try:
            with open(unit_test_output, 'w') as f:
                process = subprocess.run(
                    ["python", "run_ui_tests.py"],
                    stdout=f,
                    stderr=subprocess.STDOUT,
                    text=True
                )
            
            results["results"]["unit_tests"] = {
                "success": process.returncode == 0,
                "output_file": unit_test_output
            }
            
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥—É–ª—å–Ω—ã—Ö UI-—Ç–µ—Å—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {unit_test_output}")
            print(f"{'‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ' if process.returncode == 0 else '‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã'}")
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–¥—É–ª—å–Ω—ã—Ö UI-—Ç–µ—Å—Ç–æ–≤: {e}")
            results["results"]["unit_tests"] = {
                "success": False,
                "error": str(e)
            }
    
    # 2. –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –æ—Ç–∑—ã–≤—á–∏–≤–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
    if run_responsive_tests:
        print("\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ—Ç–∑—ã–≤—á–∏–≤–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞...")
        responsive_output_dir = os.path.join(output_dir, f"responsive_tests_{timestamp}")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∑—ã–≤—á–∏–≤–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
            from webapp.tests.device_testing import test_responsive_design, generate_html_report
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            responsive_results = test_responsive_design(
                server_url,
                responsive_output_dir
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML-–æ—Ç—á–µ—Ç
            html_report = generate_html_report(
                responsive_results,
                os.path.join(responsive_output_dir, "responsive_report.html")
            )
            
            results["results"]["responsive_tests"] = {
                "success": True,
                "output_dir": responsive_output_dir,
                "html_report": html_report
            }
            
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –æ—Ç–∑—ã–≤—á–∏–≤–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {responsive_output_dir}")
            print(f"‚úÖ HTML-–æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {html_report}")
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –æ—Ç–∑—ã–≤—á–∏–≤–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞: {e}")
            results["results"]["responsive_tests"] = {
                "success": False,
                "error": str(e)
            }
    
    # 3. –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    if run_accessibility_tests:
        print("\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏...")
        accessibility_output = os.path.join(output_dir, f"accessibility_report_{timestamp}.json")
        accessibility_html = os.path.join(output_dir, f"accessibility_report_{timestamp}.html")
        
        try:
            process = subprocess.run(
                [
                    "python", "generate_accessibility_report.py",
                    server_url,
                    "--output", accessibility_output,
                    "--html"
                ],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True
            )
            
            results["results"]["accessibility_tests"] = {
                "success": process.returncode == 0,
                "output_file": accessibility_output,
                "html_report": accessibility_html,
                "command_output": process.stdout
            }
            
            print(f"‚úÖ –û—Ç—á–µ—Ç –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {accessibility_output}")
            print(f"‚úÖ HTML-–æ—Ç—á–µ—Ç –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {accessibility_html}")
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: {e}")
            results["results"]["accessibility_tests"] = {
                "success": False,
                "error": str(e)
            }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–∏–π –æ—Ç—á–µ—Ç
    summary_file = os.path.join(output_dir, f"ui_testing_summary_{timestamp}.txt")
    with open(summary_file, 'w', encoding='utf-8') as f:
        f.write(f"–û—Ç—á–µ—Ç –æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º UI-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏\n")
        f.write(f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n")
        f.write(f"URL: {server_url}\n\n")
        
        f.write("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n")
        
        if run_unit_tests:
            unit_result = results["results"].get("unit_tests", {})
            f.write(f"1. –ú–æ–¥—É–ª—å–Ω—ã–µ UI-—Ç–µ—Å—Ç—ã: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if unit_result.get('success', False) else '‚ùå –ù–µ—É–¥–∞—á–Ω–æ'}\n")
            if "output_file" in unit_result:
                f.write(f"   –û—Ç—á–µ—Ç: {unit_result['output_file']}\n")
        
        if run_responsive_tests:
            responsive_result = results["results"].get("responsive_tests", {})
            f.write(f"2. –¢–µ—Å—Ç—ã –æ—Ç–∑—ã–≤—á–∏–≤–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if responsive_result.get('success', False) else '‚ùå –ù–µ—É–¥–∞—á–Ω–æ'}\n")
            if "output_dir" in responsive_result:
                f.write(f"   –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: {responsive_result['output_dir']}\n")
            if "html_report" in responsive_result:
                f.write(f"   HTML-–æ—Ç—á–µ—Ç: {responsive_result['html_report']}\n")
        
        if run_accessibility_tests:
            accessibility_result = results["results"].get("accessibility_tests", {})
            f.write(f"3. –¢–µ—Å—Ç—ã –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if accessibility_result.get('success', False) else '‚ùå –ù–µ—É–¥–∞—á–Ω–æ'}\n")
            if "output_file" in accessibility_result:
                f.write(f"   JSON-–æ—Ç—á–µ—Ç: {accessibility_result['output_file']}\n")
            if "html_report" in accessibility_result:
                f.write(f"   HTML-–æ—Ç—á–µ—Ç: {accessibility_result['html_report']}\n")
    
    print(f"\nüìä –û–±—â–∏–π –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {summary_file}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    all_success = all(
        results["results"].get(test, {}).get("success", False)
        for test in ["unit_tests", "responsive_tests", "accessibility_tests"]
        if results["tests_run"].get(test, False)
    )
    
    if all_success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—á–µ—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
    
    return all_success


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    parser = argparse.ArgumentParser(description='–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ UI-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--server-url', default='http://localhost:8000', help='URL —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞')
    parser.add_argument('--output-dir', default='ui_test_reports', help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤')
    parser.add_argument('--skip-unit-tests', action='store_true', help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–æ–¥—É–ª—å–Ω—ã–µ UI-—Ç–µ—Å—Ç—ã')
    parser.add_argument('--skip-responsive-tests', action='store_true', help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –æ—Ç–∑—ã–≤—á–∏–≤–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞')
    parser.add_argument('--skip-accessibility-tests', action='store_true', help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏')
    
    args = parser.parse_args()
    
    success = run_all_ui_tests(
        args.server_url,
        args.output_dir,
        not args.skip_unit_tests,
        not args.skip_responsive_tests,
        not args.skip_accessibility_tests
    )
    
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()