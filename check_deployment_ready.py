#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –Ω–∞ Amvera
"""
import os
import sys
from pathlib import Path

def check_file_exists(filepath, description):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    if Path(filepath).exists():
        print(f"‚úÖ {description}: {filepath}")
        return True
    else:
        print(f"‚ùå {description}: {filepath} - –ù–ï –ù–ê–ô–î–ï–ù")
        return False

def check_env_var(var_name, description, required=True):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    value = os.getenv(var_name)
    if value:
        print(f"‚úÖ {description}: {var_name} = {value[:20]}{'...' if len(value) > 20 else ''}")
        return True
    elif required:
        print(f"‚ùå {description}: {var_name} - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê")
        return False
    else:
        print(f"‚ö†Ô∏è  {description}: {var_name} - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
        return True

def main():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –Ω–∞ Amvera...\n")
    
    all_good = True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    files_to_check = [
        ("Dockerfile", "Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"),
        ("amvera.yml", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Amvera"),
        (".dockerignore", "Docker ignore —Ñ–∞–π–ª"),
        ("requirements.txt", "Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"),
        ("manage.py", "Django manage —Å–∫—Ä–∏–ø—Ç"),
        ("mom_baby_bot/settings_prod.py", "Production –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"),
        ("mom_baby_bot/wsgi.py", "WSGI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"),
    ]
    
    for filepath, description in files_to_check:
        if not check_file_exists(filepath, description):
            all_good = False
    
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    required_vars = [
        ("SECRET_KEY", "Django —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á"),
        ("TELEGRAM_BOT_TOKEN", "–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞"),
        ("ADMIN_IDS", "ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"),
    ]
    
    for var_name, description in required_vars:
        if not check_env_var(var_name, description, required=True):
            all_good = False
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    optional_vars = [
        ("DEBUG", "–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏"),
        ("ALLOWED_HOSTS", "–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ö–æ—Å—Ç—ã"),
        ("DATABASE_URL", "URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"),
        ("REDIS_URL", "URL Redis"),
        ("WEBHOOK_URL", "URL webhook"),
        ("WEBAPP_URL", "URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"),
    ]
    
    for var_name, description in optional_vars:
        check_env_var(var_name, description, required=False)
    
    print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è Amvera:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏")
    print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –ø–∞–Ω–µ–ª–∏ Amvera")
    print("3. Amvera –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç DATABASE_URL –∏ REDIS_URL")
    print("4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ ALLOWED_HOSTS —Å –≤–∞—à–∏–º –¥–æ–º–µ–Ω–æ–º Amvera")
    print("5. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WEBHOOK_URL –∏ WEBAPP_URL —Å –≤–∞—à–∏–º –¥–æ–º–µ–Ω–æ–º")
    
    if all_good:
        print("\nüéâ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –Ω–∞ Amvera!")
        return 0
    else:
        print("\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º.")
        return 1

if __name__ == "__main__":
    sys.exit(main())