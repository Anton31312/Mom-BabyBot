#!/usr/bin/env python
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∑–∞–ø—É—Å–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""
import os
import sys
import django

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    required_vars = ['SECRET_KEY', 'DATABASE_URL']
    optional_vars = ['REDIS_URL', 'TELEGRAM_BOT_TOKEN', 'ALLOWED_HOSTS']
    
    missing_required = []
    for var in required_vars:
        value = os.getenv(var)
        if value:
            print(f"‚úÖ {var}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ({len(value)} —Å–∏–º–≤–æ–ª–æ–≤)")
        else:
            print(f"‚ùå {var}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê")
            missing_required.append(var)
    
    for var in optional_vars:
        value = os.getenv(var)
        if value:
            print(f"‚úÖ {var}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ({len(value)} —Å–∏–º–≤–æ–ª–æ–≤)")
        else:
            print(f"‚ö†Ô∏è {var}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    return len(missing_required) == 0

def check_django():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Django"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Django...")
    
    try:
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mom_baby_bot.settings_prod')
        django.setup()
        
        from django.conf import settings
        print(f"‚úÖ Django –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print(f"   DEBUG: {settings.DEBUG}")
        print(f"   ALLOWED_HOSTS: {settings.ALLOWED_HOSTS}")
        print(f"   DATABASE ENGINE: {settings.DATABASES['default']['ENGINE']}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Django: {e}")
        return False

def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from django.db import connection
        with connection.cursor() as cursor:
            cursor.execute("SELECT 1")
            result = cursor.fetchone()
            if result:
                print("‚úÖ Django –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
                return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def check_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        from botapp.models import User
        from botapp.models_child import Child, Measurement
        from webapp.views import index
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def main():
    print("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∑–∞–ø—É—Å–∫—É...\n")
    
    checks = [
        ("Environment Variables", check_environment),
        ("Django Setup", check_django),
        ("Database Connection", check_database),
        ("Module Imports", check_imports),
    ]
    
    results = []
    for check_name, check_func in checks:
        try:
            result = check_func()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ {check_name}: {e}")
            results.append(False)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {sum(results)}/{len(results)} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ—à–ª–∏")
    
    if all(results):
        print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É.")
        return 0
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ—à–ª–∏. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
        return 1

if __name__ == "__main__":
    sys.exit(main())