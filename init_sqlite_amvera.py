#!/usr/bin/env python
"""
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Amvera
"""
import os
import sys
import django
import sqlite3
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def find_writable_db_path():
    """–ù–∞—Ö–æ–¥–∏—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø—É—Ç—å –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    possible_paths = [
        '/app/data/mom_baby_bot.db',
        os.path.join(os.getcwd(), 'mom_baby_bot.db'),
        '/tmp/mom_baby_bot.db',
        '/var/tmp/mom_baby_bot.db'
    ]
    
    for db_path in possible_paths:
        db_dir = os.path.dirname(db_path)
        logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å: {db_path}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not os.path.exists(db_dir):
                os.makedirs(db_dir, exist_ok=True)
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {db_dir}")
            
            # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect(db_path, timeout=10)
            cursor = conn.cursor()
            cursor.execute('SELECT 1')
            conn.close()
            
            logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –ø—É—Ç–∏: {db_path}")
            return db_path
            
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—É—Ç—å {db_path}: {e}")
            continue
    
    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—É—Ç—å –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

def create_sqlite_db(db_path):
    """–°–æ–∑–¥–∞–Ω–∏–µ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.info(f"üóÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(db_path)
        conn.close()
        logger.info(f"‚úÖ SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞: {db_path}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SQLite –±–∞–∑—ã: {e}")
        return False

def apply_django_migrations():
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ Django –º–∏–≥—Ä–∞—Ü–∏–π"""
    logger.info("üìä –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ Django –º–∏–≥—Ä–∞—Ü–∏–π...")
    
    try:
        import subprocess
        result = subprocess.run([
            'python', 'manage.py', 'migrate', '--noinput'
        ], capture_output=True, text=True, env={
            **os.environ,
            'DJANGO_SETTINGS_MODULE': 'mom_baby_bot.settings_prod'
        })
        
        if result.returncode == 0:
            logger.info("‚úÖ Django –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {result.stderr}")
            return False
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        return False

def create_sqlalchemy_tables(db_path):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü SQLAlchemy"""
    logger.info("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü SQLAlchemy...")
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django –µ—Å–ª–∏ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        try:
            from django.conf import settings
            if not settings.configured:
                os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mom_baby_bot.settings_prod')
                django.setup()
        except:
            os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mom_baby_bot.settings_prod')
            django.setup()
        
        from botapp.models import Base
        from sqlalchemy import create_engine
        
        # –°–æ–∑–¥–∞–µ–º engine —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—É—Ç–µ–º
        database_url = f'sqlite:///{db_path}'
        engine = create_engine(database_url, connect_args={
            'check_same_thread': False,
            'timeout': 20,
        })
        
        Base.metadata.create_all(engine)
        logger.info("‚úÖ SQLAlchemy —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SQLAlchemy —Ç–∞–±–ª–∏—Ü: {e}")
        return False

def main():
    logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Amvera\n")
    
    try:
        # –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—É—Ç—å –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_path = find_writable_db_path()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.environ['DATABASE_PATH'] = db_path
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_PATH: {db_path}")
        
        steps = [
            ("Create SQLite DB", lambda: create_sqlite_db(db_path)),
            ("Apply Django Migrations", apply_django_migrations),
            ("Create SQLAlchemy Tables", lambda: create_sqlalchemy_tables(db_path)),
        ]
        
        for step_name, step_func in steps:
            logger.info(f"\n--- {step_name} ---")
            if not step_func():
                logger.error(f"‚ùå –®–∞–≥ '{step_name}' –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                return 1
        
        logger.info("\nüéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return 0
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 