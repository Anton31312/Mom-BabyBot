/**
 * –û—Å–Ω–æ–≤–Ω–æ–π JavaScript –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Mom&BabyBot
 * –í–∫–ª—é—á–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Telegram –±–æ—Ç–æ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
document.addEventListener('DOMContentLoaded', function () {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
  const tg = window.Telegram.WebApp;
  tg.expand();

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã Telegram
  if (tg.colorScheme === 'dark') {
    document.body.classList.add('dark-theme');
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  initNavigation();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  initComponents();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
  initActiveTimersIndicator();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
  initOnlineStatusIndicator();
});

// –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function initNavigation() {
  const navToggle = document.getElementById('nav-toggle');
  const mobileNav = document.getElementById('mobile-nav');

  if (navToggle && mobileNav) {
    navToggle.addEventListener('click', function (e) {
      e.stopPropagation();
      mobileNav.classList.toggle('hidden');

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
      if (!mobileNav.classList.contains('hidden')) {
        setTimeout(() => {
          mobileNav.classList.add('fade-in');
        }, 10);
      } else {
        mobileNav.classList.remove('fade-in');
      }
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–±–∏–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ—ë –æ–±–ª–∞—Å—Ç–∏
    document.addEventListener('click', function (e) {
      if (!mobileNav.classList.contains('hidden') &&
        !mobileNav.contains(e.target) &&
        e.target !== navToggle &&
        !navToggle.contains(e.target)) {
        mobileNav.classList.add('hidden');
        mobileNav.classList.remove('fade-in');
      }
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Ä–µ–±–µ–Ω–∫–∞
  const profileSwitcher = document.getElementById('profile-switcher');
  if (profileSwitcher) {
    profileSwitcher.addEventListener('change', function () {
      const selectedProfileId = this.value;
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
      updateUIForProfile(selectedProfileId);
    });
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const currentPath = window.location.pathname;
  const navLinks = document.querySelectorAll('nav a');

  navLinks.forEach(link => {
    const linkPath = link.getAttribute('href');
    if (linkPath && currentPath.includes(linkPath) && linkPath !== '/') {
      link.classList.add('font-semibold', 'text-black');
    } else if (linkPath === '/' && currentPath === '/') {
      link.classList.add('font-semibold', 'text-black');
    }
  });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function initComponents() {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫
  const tabGroups = document.querySelectorAll('[data-tab-group]');
  tabGroups.forEach(group => {
    if (group.classList.contains('neo-tabs')) {
      // –ù–µ–æ–º–æ—Ä—Ñ–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ neomorphism.js
    } else if (group.classList.contains('glass-tabs')) {
      // –°—Ç–µ–∫–ª—è–Ω–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ glassmorphism.js
    } else {
      // –ü–æ–≤–µ–¥–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const tabs = group.querySelectorAll('[data-tab-target]');
      const tabContents = document.querySelectorAll(`[data-tab-group="${group.dataset.tabGroup}"] .tab-content`);

      tabs.forEach(tab => {
        tab.addEventListener('click', function () {
          tabs.forEach(t => t.classList.remove('active'));
          this.classList.add('active');

          tabContents.forEach(content => {
            content.style.display = 'none';
          });

          const tabContentId = this.dataset.tabTarget;
          const tabContent = document.getElementById(tabContentId);
          if (tabContent) {
            tabContent.style.display = 'block';
          }
        });
      });

      // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      if (tabs.length > 0) {
        tabs[0].click();
      }
    }
  });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —Ä–µ–±–µ–Ω–∫–∞
function updateUIForProfile(profileId) {
  // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–µ—Ç–µ–π
  console.log(`–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: ${profileId}`);

  // –ü—Ä–∏–º–µ—Ä: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
  const profileSpecificElements = document.querySelectorAll(`[data-profile-id]`);
  profileSpecificElements.forEach(element => {
    if (element.dataset.profileId === profileId) {
      element.classList.remove('hidden');
    } else {
      element.classList.add('hidden');
    }
  });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç
function formatDate(date) {
  if (!date) return '';

  const d = new Date(date);
  return d.toLocaleDateString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è
function calculateAge(birthDate) {
  if (!birthDate) return '';

  const birth = new Date(birthDate);
  const now = new Date();

  let years = now.getFullYear() - birth.getFullYear();
  let months = now.getMonth() - birth.getMonth();

  if (months < 0) {
    years--;
    months += 12;
  }

  const days = now.getDate() - birth.getDate();

  if (days < 0) {
    months--;
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–π –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –º–µ—Å—è—Ü–µ
    const lastMonth = new Date(now.getFullYear(), now.getMonth(), 0);
    days += lastMonth.getDate();
  }

  if (years > 0) {
    return `${years} –≥. ${months} –º–µ—Å.`;
  } else if (months > 0) {
    return `${months} –º–µ—Å. ${days} –¥–Ω.`;
  } else {
    return `${days} –¥–Ω.`;
  }
}
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
function initActiveTimersIndicator() {
  const indicator = document.getElementById('active-timers-indicator');
  const countElement = document.getElementById('active-timers-count');

  if (!indicator || !countElement) return;

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—Ç TimerManager
  document.addEventListener('timerManager:activeTimersUpdated', (event) => {
    const timers = event.detail.timers;
    updateActiveTimersIndicator(timers);
  });

  document.addEventListener('timerManager:timerStarted', (event) => {
    const timers = window.timerManager.getAllActiveTimers();
    updateActiveTimersIndicator(timers);
  });

  document.addEventListener('timerManager:timerStopped', (event) => {
    const timers = window.timerManager.getAllActiveTimers();
    updateActiveTimersIndicator(timers);
  });

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  const timers = window.timerManager.getAllActiveTimers();
  updateActiveTimersIndicator(timers);

  // –ö–ª–∏–∫ –ø–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—É –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
  indicator.addEventListener('click', () => {
    showActiveTimersModal();
  });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
function updateActiveTimersIndicator(timers) {
  const indicator = document.getElementById('active-timers-indicator');
  const countElement = document.getElementById('active-timers-count');

  if (!indicator || !countElement) return;

  if (timers.length > 0) {
    indicator.classList.remove('hidden');

    const timerText = timers.length === 1 ? '–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä' : '–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–∞';
    countElement.textContent = `${timers.length} ${timerText}`;
  } else {
    indicator.classList.add('hidden');
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
function showActiveTimersModal() {
  const timers = window.timerManager.getAllActiveTimers();

  if (timers.length === 0) return;

  // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  const modal = document.createElement('div');
  modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';

  // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  let modalContent = `
    <div class="glass-card max-w-md w-full mx-4 p-6">
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-lg font-semibold">–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã</h3>
        <button id="close-timers-modal" class="neo-button neo-sm">‚úï</button>
      </div>
      <div class="space-y-4">
  `;

  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —Ç–∞–π–º–µ—Ä–µ
  timers.forEach(timer => {
    const elapsedSeconds = TimerManager.getElapsedSeconds(timer.startTime);
    const formattedTime = TimerManager.formatTime(elapsedSeconds);

    let timerTitle = '–¢–∞–π–º–µ—Ä';
    let timerIcon = '‚è±Ô∏è';
    let timerUrl = '/';

    switch (timer.type) {
      case 'sleep':
        timerTitle = timer.metadata?.sleepType === 'day' ? '–î–Ω–µ–≤–Ω–æ–π —Å–æ–Ω' : '–ù–æ—á–Ω–æ–π —Å–æ–Ω';
        timerIcon = 'üí§';
        timerUrl = '/tools/sleep_timer/';
        break;
      case 'feeding':
        timerTitle = '–ö–æ—Ä–º–ª–µ–Ω–∏–µ';
        timerIcon = 'üçº';
        timerUrl = '/tools/feeding_tracker/';
        break;
      case 'contraction':
        timerTitle = '–°—Ö–≤–∞—Ç–∫–∏';
        timerIcon = '‚è±Ô∏è';
        timerUrl = '/tools/contraction_counter/';
        break;
      case 'kick':
        timerTitle = '–®–µ–≤–µ–ª–µ–Ω–∏—è';
        timerIcon = 'üë∂';
        timerUrl = '/tools/kick_counter/';
        break;
    }

    modalContent += `
      <div class="neo-card p-4">
        <div class="flex justify-between items-center">
          <div>
            <div class="flex items-center">
              <span class="mr-2">${timerIcon}</span>
              <span class="font-medium">${timerTitle}</span>
            </div>
            <div class="text-sm text-dark-gray mt-1">
              –ó–∞–ø—É—â–µ–Ω: ${new Date(timer.startTime).toLocaleTimeString('ru-RU')}
            </div>
          </div>
          <div class="text-xl font-bold">${formattedTime}</div>
        </div>
        <div class="flex justify-between mt-4">
          <a href="${timerUrl}" class="neo-button neo-sm">–û—Ç–∫—Ä—ã—Ç—å</a>
          <button class="neo-button neo-sm bg-accent" data-timer-id="${timer.timerId}">–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>
        </div>
      </div>
    `;
  });

  modalContent += `
      </div>
    </div>
  `;

  modal.innerHTML = modalContent;
  document.body.appendChild(modal);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  document.getElementById('close-timers-modal').addEventListener('click', () => {
    document.body.removeChild(modal);
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–æ–≤
  modal.querySelectorAll('[data-timer-id]').forEach(button => {
    button.addEventListener('click', () => {
      const timerId = button.dataset.timerId;
      window.timerManager.stopTimer(timerId);
      document.body.removeChild(modal);
    });
  });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
function initOnlineStatusIndicator() {
  // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
  let statusIndicator = document.getElementById('online-status-indicator');
  
  if (!statusIndicator) {
    statusIndicator = document.createElement('div');
    statusIndicator.id = 'online-status-indicator';
    statusIndicator.className = 'fixed bottom-4 right-4 px-3 py-1 rounded-full text-sm font-medium z-50 transition-all duration-300';
    document.body.appendChild(statusIndicator);
  }
  
  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
  const updateOnlineStatus = () => {
    if (navigator.onLine) {
      statusIndicator.textContent = '–û–Ω–ª–∞–π–Ω';
      statusIndicator.className = 'fixed bottom-4 right-4 px-3 py-1 rounded-full text-sm font-medium z-50 transition-all duration-300 bg-green-100 text-green-800';
      
      // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        statusIndicator.classList.add('opacity-0');
        setTimeout(() => {
          statusIndicator.classList.add('hidden');
        }, 300);
      }, 3000);
    } else {
      statusIndicator.textContent = '–û—Ñ–ª–∞–π–Ω';
      statusIndicator.className = 'fixed bottom-4 right-4 px-3 py-1 rounded-full text-sm font-medium z-50 transition-all duration-300 bg-yellow-100 text-yellow-800';
      statusIndicator.classList.remove('hidden', 'opacity-0');
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  window.addEventListener('online', updateOnlineStatus);
  window.addEventListener('offline', updateOnlineStatus);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
  updateOnlineStatus();
}