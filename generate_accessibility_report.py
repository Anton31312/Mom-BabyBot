#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–≥–æ —É—Ö–æ–¥–∞.
"""

import os
import sys
import json
import argparse
from pathlib import Path
from datetime import datetime
import django
from selenium import webdriver
from selenium.webdriver.chrome.options import Options

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å Python
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mom_baby_bot.settings')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Django
django.setup()

from webapp.tests.accessibility_utils import generate_accessibility_report
from webapp.tests.generate_html_report import generate_html_report


def run_accessibility_check(url, output_file=None, headless=True):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ URL.
    
    Args:
        url (str): URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        output_file (str, optional): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞
        headless (bool): –ó–∞–ø—É—Å–∫–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –≤ –±–µ–∑–≥–æ–ª–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    
    Returns:
        dict: –û—Ç—á–µ—Ç –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    """
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–ª—è {url}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome WebDriver
    chrome_options = Options()
    if headless:
        chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä WebDriver
    try:
        browser = webdriver.Chrome(options=chrome_options)
    except Exception:
        # –ï—Å–ª–∏ Chrome –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º Firefox
        firefox_options = webdriver.FirefoxOptions()
        if headless:
            firefox_options.add_argument("--headless")
        browser = webdriver.Firefox(options=firefox_options)
    
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        browser.get(url)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = generate_accessibility_report(browser)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        report['metadata'] = {
            'url': url,
            'timestamp': datetime.now().isoformat(),
            'user_agent': browser.execute_script("return navigator.userAgent;")
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if output_file:
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=2, ensure_ascii=False)
            print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_file}")
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
        print("\nüìä –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞:")
        print(f"- –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {'‚úÖ –•–æ—Ä–æ—à–æ' if all(report['semantic_structure'].values()) else '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è'}")
        print(f"- –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º: {'‚úÖ –•–æ—Ä–æ—à–æ' if report['form_accessibility']['inputs_without_labels'] == 0 else '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è'}")
        print(f"- –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {'‚úÖ –•–æ—Ä–æ—à–æ' if report['keyboard_navigation']['tab_index_positive'] == 0 else '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è'}")
        print(f"- –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å—é: {len(report['contrast_issues'])}")
        
        return report
    
    finally:
        browser.quit()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    parser = argparse.ArgumentParser(description='–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞')
    parser.add_argument('url', help='URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏')
    parser.add_argument('-o', '--output', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON-–æ—Ç—á–µ—Ç–∞')
    parser.add_argument('--html', action='store_true', help='–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HTML-–æ—Ç—á–µ—Ç')
    parser.add_argument('--html-output', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HTML-–æ—Ç—á–µ—Ç–∞')
    parser.add_argument('--no-headless', action='store_true', help='–ó–∞–ø—É—Å–∫–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –≤ –≤–∏–¥–∏–º–æ–º —Ä–µ–∂–∏–º–µ')
    
    args = parser.parse_args()
    
    # –ï—Å–ª–∏ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ —É–∫–∞–∑–∞–Ω, —Å–æ–∑–¥–∞–µ–º –∏–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not args.output:
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        args.output = f'accessibility_report_{timestamp}.json'
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    run_accessibility_check(args.url, args.output, not args.no_headless)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML-–æ—Ç—á–µ—Ç, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–ª–∞–≥ --html
    if args.html:
        html_output = args.html_output
        if not html_output:
            # –ï—Å–ª–∏ –ø—É—Ç—å –¥–ª—è HTML-–æ—Ç—á–µ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ JSON-–æ—Ç—á–µ—Ç–∞
            html_output = os.path.splitext(args.output)[0] + '.html'
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML-–æ—Ç—á–µ—Ç
        html_path = generate_html_report(args.output, html_output)
        print(f"‚úÖ HTML-–æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {html_path}")


if __name__ == "__main__":
    main()